import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class WorkbenchServiceImplTest {

    @InjectMocks
    private WorkbenchServiceImpl<Object> workbenchService;

    @Mock
    private WorkbenchDao<Object> workbenchDao;

    @Mock
    private QueryGeneratorFactory queryGeneratorFactory;

    @Mock
    private ColumnSelectorFactory columnSelectorFactory;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetWorkbenchDataForProfileSearchGrid() {
        // Setup for PROFILE_SEARCH_GRID
        WorkbenchRequest workbenchRequest = createProfileSearchGridRequest();

        QueryGenerator queryGenerator = mock(QueryGenerator.class);
        when(queryGeneratorFactory.getQueryGenerator("PROFILE_SEARCH_GRID")).thenReturn(queryGenerator);

        ColumnSelector columnSelector = mock(ColumnSelector.class);
        when(columnSelectorFactory.getColumnSelector("PROFILE_SEARCH_GRID")).thenReturn(columnSelector);

        List<Object> fieldValues = Arrays.asList("1002843629");

        when(workbenchDao.getWorkbenchData("PROFILE_SEARCH_GRID", "mockedQuery", fieldValues)).thenReturn(createMockedResultList());

        // Execute the method
        WorkbenchResponse<Object> result = workbenchService.getWorkbenchData(workbenchRequest);

        // Assertions for PROFILE_SEARCH_GRID
        assertEquals(createMockedResultList(), result.getData());
        assertEquals(1, result.getTotalElements().longValue());
        assertEquals(1, result.getTotalPages());

        // Verify statements for PROFILE_SEARCH_GRID
        verify(queryGeneratorFactory, times(1)).getQueryGenerator("PROFILE_SEARCH_GRID");
        verify(columnSelectorFactory, times(1)).getColumnSelector("PROFILE_SEARCH_GRID");
        verify(queryGenerator, times(1)).setColumnSelector(columnSelector);
        verify(queryGenerator, times(1)).setWorkbenchRequest(workbenchRequest);
        verify(queryGenerator, times(1)).buildQuery();
        verify(workbenchDao, times(1)).getWorkbenchData("PROFILE_SEARCH_GRID", "mockedQuery", fieldValues);
    }

    @Test
    public void testGetWorkbenchDataForSourceListGrid() {
        // Setup for SOURCE_LIST_GRID
        WorkbenchRequest workbenchRequest = createSourceListGridRequest();

        QueryGenerator queryGenerator = mock(QueryGenerator.class);
        when(queryGeneratorFactory.getQueryGenerator("SOURCE_LIST_GRID")).thenReturn(queryGenerator);

        ColumnSelector columnSelector = mock(ColumnSelector.class);
        when(columnSelectorFactory.getColumnSelector("SOURCE_LIST_GRID")).thenReturn(columnSelector);

        List<Object> fieldValues = Arrays.asList("EC 2012/388/CFSP Somalia List");

        when(workbenchDao.getWorkbenchData("SOURCE_LIST_GRID", "mockedQuery", fieldValues)).thenReturn(createMockedResultList());

        // Execute the method
        WorkbenchResponse<Object> result = workbenchService.getWorkbenchData(workbenchRequest);

        // Assertions for SOURCE_LIST_GRID
        assertEquals(createMockedResultList(), result.getData());
        assertEquals(1, result.getTotalElements().longValue());
        assertEquals(1, result.getTotalPages());

        // Verify statements for SOURCE_LIST_GRID
        verify(queryGeneratorFactory, times(1)).getQueryGenerator("SOURCE_LIST_GRID");
        verify(columnSelectorFactory, times(1)).getColumnSelector("SOURCE_LIST_GRID");
        verify(queryGenerator, times(1)).setColumnSelector(columnSelector);
        verify(queryGenerator, times(1)).setWorkbenchRequest(workbenchRequest);
        verify(queryGenerator, times(1)).buildQuery();
        verify(workbenchDao, times(1)).getWorkbenchData("SOURCE_LIST_GRID", "mockedQuery", fieldValues);
    }

    private WorkbenchRequest createProfileSearchGridRequest() {
        // Create and return a mocked WorkbenchRequest for PROFILE_SEARCH_GRID
        WorkbenchRequest request = new WorkbenchRequest();
        request.setGridID("PROFILE_SEARCH_GRID");
        List<SearchCriteria> searchCriteriaList = Arrays.asList(
                new SearchCriteria("profileID", "=", "1002843629")
        );
        request.setSearchCriteriaList(searchCriteriaList);
        request.setPageSize(50);
        request.setPageNo(1);
        return request;
    }

    private WorkbenchRequest createSourceListGridRequest() {
        // Create and return a mocked WorkbenchRequest for SOURCE_LIST_GRID
        WorkbenchRequest request = new WorkbenchRequest();
        request.setGridID("SOURCE_LIST_GRID");
        List<SearchCriteria> searchCriteriaList = Arrays.asList(
                new SearchCriteria("sourceListName", "=", "EC 2012/388/CFSP Somalia List")
        );
        request.setSearchCriteriaList(searchCriteriaList);
        request.setPageSize(50);
        request.setPageNo(1);
        return request;
    }

    private List<Object> createMockedResultList() {
        // Create and return a mocked result list for testing
        return new ArrayList<>();
    }
}
