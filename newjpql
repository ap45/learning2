// ProfileService.java
@Service
public class ProfileService {
    @Autowired
    private ProfileRepository profileRepository;

    @Autowired
    private InterestsRepository interestsRepository;

    @Autowired
    private PostsRepository postsRepository;

    @Autowired
    private ContactInfoRepository contactInfoRepository;

    public List<Profile> searchProfilesByColumnValue(String columnName, String value) {
        String jpqlQuery = "SELECT p FROM Profile p " +
                           "LEFT JOIN FETCH p.interests i " +
                           "LEFT JOIN FETCH p.posts ps " +
                           "LEFT JOIN FETCH p.contactInfo c " +
                           "WHERE p." + columnName + " = :value";

        TypedQuery<Profile> query = entityManager.createQuery(jpqlQuery, Profile.class);
        query.setParameter("value", value);

        return query.getResultList();
    }
}



@Service
public class ProfileService {
    @Autowired
    private ProfileRepository profileRepository;

    @PersistenceContext
    private EntityManager entityManager;

    public List<Profile> searchProfilesByColumnValue(String columnName, String value) {
        String jpqlQuery = "SELECT p FROM Profile p " +
                           "LEFT JOIN FETCH p.contactInfo c " +
                           "WHERE p." + columnName + " = :value";

        TypedQuery<Profile> query = entityManager.createQuery(jpqlQuery, Profile.class);
        query.setParameter("value", value);

        List<Profile> profiles = query.getResultList();

        // Fetch other associations selectively for each profile
        for (Profile profile : profiles) {
            profile.getInterests().size(); // Fetch interests lazily if needed
            profile.getPosts().size();      // Fetch posts lazily if needed
        }

        return profiles;
    }
}


// ProfileController.java
@RestController
@RequestMapping("/api/profiles")
public class ProfileController {
    @Autowired
    private ProfileService profileService;

    @GetMapping("/search")
    public ResponseEntity<List<Profile>> searchProfiles(@RequestParam String columnName, @RequestParam String value) {
        List<Profile> profiles = profileService.searchProfilesByColumnValue(columnName, value);
        return ResponseEntity.ok(profiles);
    }
}
