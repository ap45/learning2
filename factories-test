import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

@SpringJUnitConfig
@SpringBootTest
public class QueryGeneratorFactoryTest {

    @InjectMocks
    private QueryGeneratorFactory queryGeneratorFactory;

    @Mock
    private QueryGenerator searchGridQueryGenerator;

    @Mock
    private QueryGenerator sourceListGridQueryGenerator;

    @Mock
    private QueryGenerator sourceListProfileGridQueryGenerator;

    @Test
    public void testGetQueryGenerator_ProfileSearchGrid() throws IOException {
        String gridName = "PROFILE_SEARCH_GRID";
        String expectedQuery = "SELECT * FROM profiles";
        Map<String, String> queries = new HashMap<>();
        queries.put(gridName, expectedQuery);

        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader::getSqlQuery).thenReturn(queries);

            QueryGenerator result = queryGeneratorFactory.getQueryGenerator(gridName);

            assertNotNull(result);
            assertEquals(searchGridQueryGenerator, result);
            assertEquals(expectedQuery, result.getFixedQuery());
        }
    }

    @Test
    public void testGetQueryGenerator_SourceListGrid() throws IOException {
        String gridName = "SOURCE_LIST_GRID";
        String expectedQuery = "SELECT * FROM source_list";
        Map<String, String> queries = new HashMap<>();
        queries.put(gridName, expectedQuery);

        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader::getSqlQuery).thenReturn(queries);

            QueryGenerator result = queryGeneratorFactory.getQueryGenerator(gridName);

            assertNotNull(result);
            assertEquals(sourceListGridQueryGenerator, result);
            assertEquals(expectedQuery, result.getFixedQuery());
        }
    }

    @Test
    public void testGetQueryGenerator_SourceListProfileGrid() throws IOException {
        String gridName = "SOURCE_LIST_PROFILE_GRID";
        String expectedQuery = "SELECT * FROM source_list_profile";
        Map<String, String> queries = new HashMap<>();
        queries.put(gridName, expectedQuery);

        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader::getSqlQuery).thenReturn(queries);

            QueryGenerator result = queryGeneratorFactory.getQueryGenerator(gridName);

            assertNotNull(result);
            assertEquals(sourceListProfileGridQueryGenerator, result);
            assertEquals(expectedQuery, result.getFixedQuery());
        }
    }

    @Test
    public void testGetQueryGenerator_InvalidGridName() throws IOException {
        String gridName = "INVALID_GRID_NAME";

        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader::getSqlQuery).thenReturn(new HashMap<>());

            // Expecting IllegalArgumentException when an invalid grid name is provided
            IllegalArgumentException exception = org.junit.jupiter.api.Assertions.assertThrows(
                    IllegalArgumentException.class,
                    () -> queryGeneratorFactory.getQueryGenerator(gridName)
            );

            assertEquals("Invalid grid name " + gridName, exception.getMessage());
        }
    }
}


///////////////////// ROW MAPPER ///////////

// RowMapperFactoryTest.java
import org.testng.annotations.Test;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;
import static org.testng.Assert.*;

public class RowMapperFactoryTest {

    @InjectMocks
    private RowMapperFactory rowMapperFactory;

    @Mock
    private RowMapper searchGridRowMapper;

    @Mock
    private RowMapper sourcelistGridRowMapper;

    @Mock
    private RowMapper sourceListProfileGridRowMapper;

    @Mock
    private RowMapper complianceUnitRowMapper;

    @Test
    public void testGetRowMapperSearchGrid() {
        RowMapper result = rowMapperFactory.getRowMapper("PROFILE_SEARCH_GRID");
        assertEquals(result, searchGridRowMapper);
    }

    @Test
    public void testGetRowMapperSourceListGrid() {
        RowMapper result = rowMapperFactory.getRowMapper("SOURCE_LIST_GRID");
        assertEquals(result, sourcelistGridRowMapper);
    }

    @Test
    public void testGetRowMapperSourceListProfileGrid() {
        RowMapper result = rowMapperFactory.getRowMapper("SOURCE_LIST_PROFILE_GRID");
        assertEquals(result, sourceListProfileGridRowMapper);
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testGetRowMapperInvalidGridName() {
        rowMapperFactory.getRowMapper("INVALID_GRID_NAME");
    }
}

///// COLUMNE SELECTOR ///////////////

// ColumnSelectorFactoryTest.java
import org.testng.annotations.Test;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;
import static org.testng.Assert.*;

public class ColumnSelectorFactoryTest {

    @InjectMocks
    private ColumnSelectorFactory columnSelectorFactory;

    @Mock
    private ColumnSelector searchGridColumnSelector;

    @Mock
    private ColumnSelector sourceListGridColumnSelector;

    @Mock
    private ColumnSelector sourceListProfileGridColumnSelector;

    @Mock
    private ColumnSelector complianceUnitColumnSelector;

    @Test
    public void testGetColumnSelectorSearchGrid() {
        ColumnSelector result = columnSelectorFactory.getColumnSelector("PROFILE_SEARCH_GRID");
        assertEquals(result, searchGridColumnSelector);
    }

    @Test
    public void testGetColumnSelectorSourceListGrid() {
        ColumnSelector result = columnSelectorFactory.getColumnSelector("SOURCE_LIST_GRID");
        assertEquals(result, sourceListGridColumnSelector);
    }

    @Test
    public void testGetColumnSelectorSourceListProfileGrid() {
        ColumnSelector result = columnSelectorFactory.getColumnSelector("SOURCE_LIST_PROFILE_GRID");
        assertEquals(result, sourceListProfileGridColumnSelector);
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testGetColumnSelectorInvalidGridName() {
        columnSelectorFactory.getColumnSelector("INVALID_GRID_NAME");
    }
}
