import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;

public class QueryGeneratorFactoryTest {

    @InjectMocks
    private QueryGeneratorFactory queryGeneratorFactory;

    @Mock
    private QueryGenerator searchGridQueryGenerator;

    @Mock
    private QueryGenerator sourceListGridQueryGenerator;

    @Mock
    private QueryGenerator sourceListProfileGridQueryGenerator;

    @Mock
    private SQLQueryReader sqlQueryReader;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetQueryGenerator_ProfileSearchGrid() {
        String gridName = "PROFILE_SEARCH_GRID";
        String expectedQuery = "SELECT * FROM profiles";
        Map<String, String> queries = new HashMap<>();
        queries.put(gridName, expectedQuery);

        when(sqlQueryReader.getSqlQuery()).thenReturn(queries);

        QueryGenerator result = queryGeneratorFactory.getQueryGenerator(gridName);

        assertNotNull(result);
        assertEquals(expectedQuery, result.getFixedQuery());
        verify(searchGridQueryGenerator, times(1)).setFixedQuery(expectedQuery);
        assertEquals(searchGridQueryGenerator, result);
    }

    @Test
    public void testGetQueryGenerator_SourceListGrid() {
        String gridName = "SOURCE_LIST_GRID";
        String expectedQuery = "SELECT * FROM source_list";
        Map<String, String> queries = new HashMap<>();
        queries.put(gridName, expectedQuery);

        when(sqlQueryReader.getSqlQuery()).thenReturn(queries);

        QueryGenerator result = queryGeneratorFactory.getQueryGenerator(gridName);

        assertNotNull(result);
        assertEquals(expectedQuery, result.getFixedQuery());
        verify(sourceListGridQueryGenerator, times(1)).setFixedQuery(expectedQuery);
        assertEquals(sourceListGridQueryGenerator, result);
    }

    @Test
    public void testGetQueryGenerator_SourceListProfileGrid() {
        String gridName = "SOURCE_LIST_PROFILE_GRID";
        String expectedQuery = "SELECT * FROM source_list_profile";
        Map<String, String> queries = new HashMap<>();
        queries.put(gridName, expectedQuery);

        when(sqlQueryReader.getSqlQuery()).thenReturn(queries);

        QueryGenerator result = queryGeneratorFactory.getQueryGenerator(gridName);

        assertNotNull(result);
        assertEquals(expectedQuery, result.getFixedQuery());
        verify(sourceListProfileGridQueryGenerator, times(1)).setFixedQuery(expectedQuery);
        assertEquals(sourceListProfileGridQueryGenerator, result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testGetQueryGenerator_InvalidGridName() {
        String gridName = "INVALID_GRID_NAME";

        queryGeneratorFactory.getQueryGenerator(gridName);
    }

    // You can add more test cases for other methods and edge cases.
}
