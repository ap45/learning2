import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class WorkbenchControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private WorkbenchServiceFactory workbenchServiceFactory;

    @Test
    public void testGetWorkbenchData() throws Exception {
        // Given
        WorkbenchRequest request = new WorkbenchRequest("PROFILE_SEARCH_GRID", Collections.emptyList(),
                "", "", 1, 50);
        WorkbenchResponse<SearchResult> response = createSampleResponse();
        WorkbenchService<SearchResult> mockService = Mockito.mock(WorkbenchService.class);
        Mockito.when(mockService.getWorkbenchData(Mockito.any(WorkbenchRequest.class)))
               .thenReturn(response);
        Mockito.when(workbenchServiceFactory.getService(Mockito.any(Class.class)))
               .thenReturn(mockService);

        // When
        mockMvc.perform(post("/pm-ui-api/workbench")
               .contentType(MediaType.APPLICATION_JSON)
               .content(objectMapper.writeValueAsString(request)))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.data[0].firstName").value("Muhammed Khairiz"));

        // Then
        Mockito.verify(mockService, Mockito.times(1)).getWorkbenchData(Mockito.eq(request));
    }

    private WorkbenchResponse<SearchResult> createSampleResponse() {
        SearchResult result = new SearchResult();
        result.setFirstName("Muhammed Khairiz");
        // Set other fields...
        
        List<SearchResult> dataList = Collections.singletonList(result);

        return new WorkbenchResponse<>(dataList, 1, 1);
    }
}
/////////////////
/// service 
@RunWith(SpringRunner.class)
@SpringBootTest
public class WorkbenchServiceTest {

    @Autowired
    private WorkbenchServiceFactory workbenchServiceFactory;

    @Test
    public void testGetWorkbenchData() {
        // Given
        WorkbenchRequest request = new WorkbenchRequest("PROFILE_SEARCH_GRID", Collections.emptyList(),
                "", "", 1, 50);
        WorkbenchService<SearchResult> service = workbenchServiceFactory.getService(SearchResult.class);

        // When
        WorkbenchResponse<SearchResult> response = service.getWorkbenchData(request);

        // Then
        assertNotNull(response);
        // Add more assertions based on the expected behavior
    }
}



//////// service impl ///////
@RunWith(SpringRunner.class)
@SpringBootTest
public class WorkbenchServiceImplTest {

    @Autowired
    private WorkbenchServiceImpl<SearchResult> workbenchService;

    @MockBean
    private WorkbenchDao<SearchResult> workbenchDao;

    @Test
    public void testGetWorkbenchData() {
        // Given
        WorkbenchRequest request = new WorkbenchRequest("PROFILE_SEARCH_GRID", Collections.emptyList(),
                "", "", 1, 50);
        List<SearchResult> mockData = Collections.singletonList(new SearchResult());
        Mockito.when(workbenchDao.getWorkbenchData(Mockito.anyString(), Mockito.anyString(), Mockito.anyList()))
               .thenReturn(mockData);

        // When
        WorkbenchResponse<SearchResult> response = workbenchService.getWorkbenchData(request);

        // Then
        assertNotNull(response);
        // Add more assertions based on the expected behavior
    }
}

/////
