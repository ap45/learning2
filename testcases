@RunWith(SpringRunner.class)
@SpringBootTest
public class WorkbenchControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private WorkbenchServiceFactory workbenchServiceFactory;

    @Autowired
    private WorkbenchController workbenchController;

    @Test
    public void testGetWorkbenchData_Success() throws Exception {
        // Mocking the service response
        WorkbenchResponse<?> mockResponse = createMockResponse();
        when(workbenchServiceFactory.getService(any())).thenReturn(createMockService(mockResponse));

        // Sample request
        String sampleRequest = "{\"gridId\":\"PROFILE_SEARCH_GRID\",\"searchcriteriaList\":[{\"queryKey\":\"profileID\",\"queryopeator\":\"=\",\"queryValue\":\"100229\"}],\"sortColumn\":\"\",\"sortDirection\":\"\",\"pageSize\":\"50\",\"pageNo\":1}";

        // Performing the request
        mockMvc.perform(post("/pm-ui-api/workbench")
                .contentType(MediaType.APPLICATION_JSON)
                .content(sampleRequest))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data[0].firstName", is("Med Kz")))
                .andExpect(jsonPath("$.totalElements", is(1)))
                .andExpect(jsonPath("$.totalPages", is(1)));
    }

    // Other test cases for error handling, invalid input, etc.

    private WorkbenchService createMockService(WorkbenchResponse<?> mockResponse) {
        WorkbenchService workbenchService = mock(WorkbenchService.class);
        when(workbenchService.getWorkbenchData(any())).thenReturn(mockResponse);
        return workbenchService;
    }

    private WorkbenchResponse<?> createMockResponse() {
        // Construct and return a mock response based on the sample response
        // You may need to adjust this based on the actual structure of your response
        return new WorkbenchResponse<>(Collections.singletonList(
                new HashMap<String, Object>() {{
                    put("firstName", "Mud Khz");
                    put("lastName", "Kh");
                    // Add other fields as needed
                }}
        ), 1, 1);
    }
}


//////////// service /////
@RunWith(MockitoJUnitRunner.class)
public class WorkbenchServiceTest {

    @Mock
    private WorkbenchRepository repository;

    @InjectMocks
    private WorkbenchServiceImpl workbenchService;

    @Test
    public void testGetWorkbenchData_Success() {
        // Mocking the repository data
        when(repository.getWorkbenchData(any())).thenReturn(createMockResponse());

        // Test the service method
        WorkbenchResponse<?> result = workbenchService.getWorkbenchData(createSampleRequest());

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(1, result.getTotalPages());
        assertNotNull(result.getData());
        assertEquals("Muhammed Khairiz", result.getData().get(0).get("firstName"));
        // Add more assertions based on the expected response
    }

    // Other test cases for error scenarios, edge cases, etc.

    private Map<String, Object> createSampleRequest() {
        // Construct and return a sample request based on your example
        // You may need to adjust this based on the actual structure of your request
        return new HashMap<String, Object>() {{
            put("gridId", "PROFILE_SEARCH_GRID");
            put("searchcriteriaList", Collections.singletonList(
                    new HashMap<String, Object>() {{
                        put("queryKey", "profileID");
                        put("queryopeator", "=");
                        put("queryValue", "10629");
                    }}
            ));
            put("sortColumn", "");
            put("sortDirection", "");
            put("pageSize", "50");
            put("pageNo", 1);
        }};
    }

    private WorkbenchResponse<?> createMockResponse() {
        // Construct and return a mock response based on the sample response
        // You may need to adjust this based on the actual structure of your response
        return new WorkbenchResponse<>(Collections.singletonList(
                new HashMap<String, Object>() {{
                    put("firstName", "Muhd Kiz");
                    put("lastName", "Khid");
                    // Add other fields as needed
                }}
        ), 1, 1);
    }
}

///////// service impl /////
@RunWith(MockitoJUnitRunner.class)
public class WorkbenchServiceImplTest {

    @Mock
    private WorkbenchRepository repository;

    @InjectMocks
    private WorkbenchServiceImpl workbenchService;

    @Test
    public void testGetWorkbenchData_Success() {
        // Mocking the repository data
        when(repository.fetchWorkbenchData(any())).thenReturn(createMockResponse());

        // Test the service method
        WorkbenchResponse<?> result = workbenchService.getWorkbenchData(createSampleRequest());

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(1, result.getTotalPages());
        assertNotNull(result.getData());
        assertEquals("Muhed Khz", result.getData().get(0).get("firstName"));
        // Add more assertions based on the expected response
    }

    // Other test cases for error scenarios, edge cases, etc.

    private Map<String, Object> createSampleRequest() {
        // Construct and return a sample request based on your example
        // You may need to adjust this based on the actual structure of your request
        return new HashMap<String, Object>() {{
            put("gridId", "PROFILE_SEARCH_GRID");
            put("searchcriteriaList", Collections.singletonList(
                    new HashMap<String, Object>() {{
                        put("queryKey", "profileID");
                        put("queryopeator", "=");
                        put("queryValue", "10029");
                    }}
            ));
            put("sortColumn", "");
            put("sortDirection", "");
            put("pageSize", "50");
            put("pageNo", 1);
        }};
    }

    private WorkbenchResponse<?> createMockResponse() {
        // Construct and return a mock response based on the sample response
        // You may need to adjust this based on the actual structure of your response
        return new WorkbenchResponse<>(Collections.singletonList(
                new HashMap<String, Object>() {{
                    put("firstName", "Mumed Kriz");
                    put("lastName", "Kid");
                    // Add other fields as needed
                }}
        ), 1, 1);
    }
}
