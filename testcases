import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class WorkbenchControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private WorkbenchServiceFactory workbenchServiceFactory;

    @Test
    public void testGetWorkbenchData_ProfileSearchGrid_ReturnsValidData() throws Exception {
        // Arrange
        WorkbenchRequest request = createSampleRequest();
        WorkbenchResponse<SearchResult> expectedResponse = createSampleResponse();
        WorkbenchService<SearchResult> mockService = mock(WorkbenchService.class);

        when(workbenchServiceFactory.getService(SearchResult.class)).thenReturn(mockService);
        when(mockService.getWorkbenchData(any(WorkbenchRequest.class))).thenReturn(expectedResponse);

        // Act
        MvcResult result = mockMvc.perform(post("/pm-ui-api/workbench")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(request)))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        verify(mockService, times(1)).getWorkbenchData(eq(request));
        String actualResponseBody = result.getResponse().getContentAsString();
        assertThat(actualResponseBody).isEqualTo(asJsonString(expectedResponse));
    }

    private WorkbenchRequest createSampleRequest() {
        List<SearchCriteria> searchCriteriaList = Collections.singletonList(
                new SearchCriteria("profileID", "=", "56464")
        );
        return new WorkbenchRequest("PROFILE_SEARCH_GRID", searchCriteriaList, "", "", 50, 1);
    }

    private WorkbenchResponse<SearchResult> createSampleResponse() {
        SearchResult resultItem = new SearchResult();
        resultItem.setFirstName("Muhh Khriz");
        resultItem.setLastName("Khid");
        // ... set other properties

        List<SearchResult> resultList = Collections.singletonList(resultItem);

        WorkbenchResponse<SearchResult> response = new WorkbenchResponse<>();
        response.setData(resultList);
        response.setTotalElements(1L);
        response.setTotalPages(1);

        return response;
    }

    // Helper method to convert object to JSON string
    private String asJsonString(Object obj) throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.writeValueAsString(obj);
    }
}
