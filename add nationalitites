import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Box, TextField, Checkbox, ListItemText, MenuItem, Chip } from '@mui/material';
import { updateNationalities } from '../store/nationalitiesReducer';
import axios from 'axios';

const generateRandomString = () => `${Date.now()}-${Math.random()}`;

const Nationalities = () => {
  const dispatch = useDispatch();
  const selectedNationalities = useSelector((state) => state.nationalities.selected);
  const [search, setSearch] = useState('');
  const [countryList, setCountryList] = useState([]);
  const [showDropdown, setShowDropdown] = useState(false);

  useEffect(() => {
    // Fetch country list from API
    const fetchCountryList = async () => {
      try {
        const response = await axios.get('/api/countries'); // Update with the correct API endpoint
        setCountryList(response.data);
      } catch (error) {
        console.error('Error fetching country list:', error);
      }
    };
    fetchCountryList();
  }, []);

  const handleToggleNationality = (country) => {
    const countryExists = selectedNationalities.find((nat) => nat.value === country.value);
    let newSelected = [...selectedNationalities];

    if (countryExists) {
      newSelected = newSelected.filter((nat) => nat.value !== country.value);
    } else {
      newSelected.push({ id: generateRandomString(), ...country });
    }

    dispatch(updateNationalities(newSelected));
  };

  const handleSearchChange = (event) => {
    setSearch(event.target.value);
    setShowDropdown(true);
  };

  const handleSearchFocus = () => {
    setShowDropdown(true);
  };

  const handleSearchBlur = () => {
    setTimeout(() => setShowDropdown(false), 200); // To allow onClick event to register before hiding dropdown
  };

  const filteredOptions = countryList.filter((option) =>
    option.label.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <Box>
      <TextField
        label="Find and select a country"
        value={search}
        onChange={handleSearchChange}
        onFocus={handleSearchFocus}
        onBlur={handleSearchBlur}
        fullWidth
        variant="outlined"
      />
      {showDropdown && (
        <Box mt={2} border={1} borderColor="grey.400" borderRadius="4px" bgcolor="white" zIndex={1} position="absolute" width="100%">
          {filteredOptions.map((option) => (
            <MenuItem key={option.value} value={option.value} onClick={() => handleToggleNationality(option)}>
              <Checkbox checked={selectedNationalities.some((nat) => nat.value === option.value)} />
              <ListItemText primary={option.label} />
            </MenuItem>
          ))}
        </Box>
      )}
      <Box mt={2}>
        {selectedNationalities.map((nationality) => (
          <Chip key={nationality.id} label={nationality.label} onDelete={() => handleToggleNationality(nationality)} />
        ))}
      </Box>
    </Box>
  );
};

export default Nationalities;


import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  selected: [],
};

const nationalitiesSlice = createSlice({
  name: 'nationalities',
  initialState,
  reducers: {
    updateNationalities: (state, action) => {
      state.selected = action.payload;
    },
  },
});

export const { updateNationalities } = nationalitiesSlice.actions;
export default nationalitiesSlice.reducer;
