public String mapOperator(String operatorString) {
    switch (operatorString) {
        case "=":
            return QueryOperation.EQUALS.getSqlOperator();
        case "!=":
            return QueryOperation.NOT_EQUALS.getSqlOperator();
        case "contains":
            return QueryOperation.LIKE.getSqlOperator();
        case "does not contain":
            return QueryOperation.NOT_LIKE.getSqlOperator();
        case "between":
            return QueryOperation.BETWEEN.getSqlOperator();
        case "not between":
            return QueryOperation.NOT_BETWEEN.getSqlOperator();
        case "in":
            return QueryOperation.IN.getSqlOperator();
        case "not in":
            return QueryOperation.NOT_IN.getSqlOperator();
        case "empty":
            return QueryOperation.IS_NULL.getSqlOperator();
        case "is not empty":
            return QueryOperation.IS_NOT_NULL.getSqlOperator();
        default:
            throw new IllegalArgumentException("Unsupported UI operation");
    }
}

public StringBuilder getWhereClause() {
    List<String> fieldNames = workbenchRequest.getSearchCriterialist().stream()
            .map(cri -> cri.getQueryKey())
            .collect(Collectors.toList());

    List<String> dbNames = fieldNames.stream()
            .map(name -> columnSelector.getColumnMetaData(name).getDBKey())
            .collect(Collectors.toList());

    List<String> comparisonOperators = workbenchRequest.getSearchCriterialist().stream()
            .map(cri -> mapOperator(cri.getQueryOperator()))
            .collect(Collectors.toList());

    StringBuilder sql = new StringBuilder(" ");

    boolean firstCondition = true;

    for (int i = 0; i < dbNames.size(); i++) {
        if (!firstCondition) {
            sql.append(" AND ");
        } else {
            firstCondition = false;
        }

        sql.append(dbNames.get(i)).append(" ").append(comparisonOperators.get(i));

        Object queryValueObj = workbenchRequest.getSearchCriterialist().get(i).getQueryValue();
        String queryValue = queryValueObj != null ? queryValueObj.toString() : "";

        if ("between".equalsIgnoreCase(comparisonOperators.get(i))) {
            String[] values = queryValue.split(",");
            if (values.length == 2) {
                sql.append(" '").append(values[0]).append("' AND '").append(values[1]).append("'");
            }
        } else if ("in".equalsIgnoreCase(comparisonOperators.get(i)) ||
                "not in".equalsIgnoreCase(comparisonOperators.get(i))) {
            sql.append(" (").append(queryValue).append(")");
        } else if ("like".equalsIgnoreCase(comparisonOperators.get(i)) ||
                "not like".equalsIgnoreCase(comparisonOperators.get(i))) {
            sql.append(" '%").append(queryValue).append("%'");
        } else if ("empty".equalsIgnoreCase(comparisonOperators.get(i))) {
            sql.append(" IS NULL");
        } else if ("is not empty".equalsIgnoreCase(comparisonOperators.get(i))) {
            sql.append(" IS NOT NULL");
        } else {
            // Handle other operators here, if needed.
            sql.append("param").append(i);
        }
    }

    return sql;
}




////////////////////////////////////////////


public StringBuilder getWhereClause() {
    StringBuilder sql = new StringBuilder();

    boolean firstCondition = true;

    List<SearchCriteria> searchCriteriaList = workbenchRequest.getSearchCriterialist();

    for (int i = 0; i < searchCriteriaList.size(); i++) {
        if (!firstCondition) {
            sql.append(" AND ");
        } else {
            firstCondition = false;
        }

        SearchCriteria criteria = searchCriteriaList.get(i);

        String dbName = columnSelector.getColumnMetaData(criteria.getQueryKey()).getDBKey();
        String operator = mapOperator(criteria.getQueryOperator());
        Object queryValueObj = criteria.getQueryValue();

        sql.append(dbName).append(" ").append(operator).append(" ");

        if ("between".equalsIgnoreCase(operator)) {
            String[] values = queryValueObj.toString().split(",");
            if (values.length == 2) {
                sql.append("'").append(values[0]).append("' AND '").append(values[1]).append("'");
            }
        } else if ("in".equalsIgnoreCase(operator) || "not in".equalsIgnoreCase(operator)) {
            sql.append("(");
            if (queryValueObj instanceof Object[]) {
                Object[] values = (Object[]) queryValueObj;
                sql.append(Arrays.stream(values)
                        .map(value -> (value instanceof String || value instanceof Date) ? "'" + value + "'" : String.valueOf(value))
                        .collect(Collectors.joining(", ")));
            } else {
                sql.append((queryValueObj instanceof String || queryValueObj instanceof Date) ? "'" + queryValueObj + "'" : queryValueObj);
            }
            sql.append(")");
        } else if ("like".equalsIgnoreCase(operator) || "not like".equalsIgnoreCase(operator)) {
            sql.append(" '%").append(queryValueObj).append("%'");
        } else if ("empty".equalsIgnoreCase(operator)) {
            sql.append(" IS NULL");
        } else if ("is not empty".equalsIgnoreCase(operator)) {
            sql.append(" IS NOT NULL");
        } else {
            // Handle other operators here, if needed.
            sql.append("param").append(i);
        }
    }

    return sql;
}

