// PDFDocument.js
import React from 'react';
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

const PDFDocument = ({ profileData }) => {
  const generatePdf = () => {
    return (
      <Document>
        <Page size="A4" style={styles.page}>
          <View style={styles.section}>
            <Text>Profile ID: {profileData.profileId}</Text>
            <Text>Profile Type: {profileData.profileType}</Text>
            <Text>Primary Name: {profileData.primaryName.firstName} {profileData.primaryName.lastName}</Text>
            {/* Render other details as desired */}
          </View>
          <View style={styles.section}>
            <Text>Profile Relationships:</Text>
            {profileData.profileRelationship.map((relationship, index) => (
              <View key={index} style={styles.tableRow}>
                <Text>{relationship.relationship.rpmAssociationTypRefEntity.rtTypValue}: {relationship.associationId}</Text>
              </View>
            ))}
          </View>
          {/* Add other sections as desired */}
        </Page>
      </Document>
    );
  };

  return (
    <Document>
      {generatePdf()}
    </Document>
  );
};

const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    margin: 10,
  },
  section: {
    margin: 10,
    padding: 10,
    flexGrow: 1,
  },
  tableRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    borderBottomWidth: 1,
    borderBottomColor: '#000',
    paddingBottom: 5,
    marginBottom: 5,
  },
});

export default PDFDocument;


///////

// ProfileDetails.js
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { exportToDRM } from './redux/actions'; // Redux action to export to DRM
import PDFDocument from './PDFDocument'; // Import the PDFDocument component

const ProfileDetails = ({ profileData }) => {
  const dispatch = useDispatch();
  const [pdfBase64, setPdfBase64] = useState('');

  const handleExportToPdf = () => {
    const pdfBase64 = generatePdfBase64(profileData); // Generate PDF base64
    setPdfBase64(pdfBase64);

    // Dispatch Redux action to export to DRM
    dispatch(exportToDRM({ pdfBase64, otherPayload: /* Add your other payload here */ }));
  };

  const generatePdfBase64 = (profileData) => {
    // Generate PDF document and convert to base64
    const pdfData = generatePdf(profileData);
    return btoa(pdfData);
  };

  const generatePdf = (profileData) => {
    return (
      <PDFDocument profileData={profileData} />
    );
  };

  return (
    <div>
      <button onClick={handleExportToPdf}>Export Details</button>
    </div>
  );
};

export default ProfileDetails;

//////////////////////

// redux/actions.js
export const EXPORT_TO_DRM_SUCCESS = 'EXPORT_TO_DRM_SUCCESS';
export const EXPORT_TO_DRM_FAILURE = 'EXPORT_TO_DRM_FAILURE';

export const exportToDRM = (payload) => async (dispatch) => {
  try {
    // Simulate API call with setTimeout
    setTimeout(() => {
      const response = { bytestream: 'example_bytestream' }; // Example response

      dispatch(exportToDRMSuccess(response));
    }, 1000); // Simulating 1 second delay
  } catch (error) {
    dispatch(exportToDRMFailure(error.message));
  }
};

export const exportToDRMSuccess = (data) => ({
  type: EXPORT_TO_DRM_SUCCESS,
  payload: data,
});

export const exportToDRMFailure = (error) => ({
  type: EXPORT_TO_DRM_FAILURE,
  payload: error,
});

//////
ANOTHER APPROACH  ////////////



// PDFDocument.js
import React from 'react';
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

const PDFDocument = ({ profileData }) => {
  const generatePdf = () => {
    return (
      <Document>
        <Page size="A4" style={styles.page}>
          <View style={styles.section}>
            <Text>Profile ID: {profileData.profileId}</Text>
            <Text>Profile Type: {profileData.profileType}</Text>
            <Text>Primary Name: {profileData.primaryName[0].firstName} {profileData.primaryName[0].lastName}</Text>
            {renderField("Status", profileData.status)}
            {renderField("Gender", profileData.gender)}
            {renderArrayField("Date of Birth", profileData.dateOfBirth, "year")}
            {renderArrayField("Profile Relationships", profileData.profileRelationship, "relationship.rpmAssociationTypRefEntity.rtTypValue", "associationId")}
            {renderArrayField("Nationality", profileData.nationalityOrInc)}
            {renderField("Date of Death", profileData.dateOfDeath)}
            {renderArrayField("Names", profileData.names, "nameType", "firstName", "lastName")}
            {renderArrayField("Source List", profileData.sourceList, "sourceListname", "sourceListId")}
            {renderField("Alternative ID", profileData.alternateld)}
            {profileData.dataSource && (
              <View>
                <Text>Data Source ID: {profileData.dataSource.datasourceld}</Text>
                <Text>Data Source: {profileData.dataSource.ubsDataSource}</Text>
                <Text>Description: {profileData.dataSource.description}</Text>
              </View>
            )}
          </View>
        </Page>
      </Document>
    );
  };

  const renderField = (label, value) => {
    return value ? <Text>{label}: {value}</Text> : null;
  };

  const renderArrayField = (label, array, ...fields) => {
    if (!array || array.length === 0) return null;
    return (
      <View style={styles.section}>
        <Text>{label}:</Text>
        {array.map((item, index) => (
          <View key={index} style={styles.tableRow}>
            {fields.map((field, i) => (
              <Text key={i}>{getFieldValue(item, field)}</Text>
            ))}
          </View>
        ))}
      </View>
    );
  };

  const getFieldValue = (item, field) => {
    const fieldParts = field.split('.');
    let value = item;

    for (const part of fieldParts) {
      if (Array.isArray(value)) {
        const arrayIndex = parseInt(part, 10);
        if (!isNaN(arrayIndex) && value[arrayIndex]) {
          value = value[arrayIndex];
        } else {
          value = null;
          break;
        }
      } else if (value && value[part]) {
        value = value[part];
      } else {
        value = null;
        break;
      }
    }

    return value;
  };

  return (
    <Document>
      {generatePdf()}
    </Document>
  );
};

const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    margin: 10,
  },
  section: {
    margin: 10,
    padding: 10,
    flexGrow: 1,
  },
  tableRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    borderBottomWidth: 1,
    borderBottomColor: '#000',
    paddingBottom: 5,
    marginBottom: 5,
  },
});

export default PDFDocument;




/////////
// ProfileDetails.js

import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { exportToDRM } from './redux/actions'; // Redux action to export to DRM
import PDFDocument from './PDFDocument'; // Import the PDFDocument component

const ProfileDetails = () => {
  const profileData = useSelector(state => state.profile); // Assuming you have profile data in Redux state
  const dispatch = useDispatch();
  const [pdfBase64, setPdfBase64] = useState('');

  const handleExportToPdf = () => {
    const pdfBase64 = generatePdfBase64(profileData); // Generate PDF base64
    setPdfBase64(pdfBase64);

    // Dispatch Redux action to export to DRM
    dispatch(exportToDRM({ pdfBase64, otherPayload: /* Add your other payload here */ }));
  };

  const generatePdfBase64 = (profileData) => {
    // Generate PDF document and convert to base64
    const pdfData = generatePdf(profileData);
    return btoa(pdfData);
  };

  const generatePdf = (profileData) => {
    return (
      <PDFDocument profileData={profileData} />
    );
  };

  return (
    <div>
      <button onClick={handleExportToPdf}>Export Details</button>
    </div>
  );
};

export default ProfileDetails;
