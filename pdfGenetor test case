import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.ByteArrayOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;

@RunWith(MockitoJUnitRunner.class)
public class PdfGeneratorTest {

    @Mock
    Document document;

    @Mock
    ProfileDetail profileData;

    @Captor
    ArgumentCaptor<Paragraph> paragraphCaptor;

    @Before
    public void setUp() {
        document = new Document();
    }

    @Test
    public void testAddProfileData() throws NoSuchMethodException, IllegalAccessException,
            InvocationTargetException {
        when(profileData.getPrimaryName()).thenReturn(Arrays.asList(new Name("John", "Doe", "")));
        when(profileData.getStatus()).thenReturn(1);

        try {
            Method method = PdfGenerator.class.getDeclaredMethod("addProfileData", Document.class, ProfileDetail.class);
            method.setAccessible(true);
            method.invoke(null, document, profileData);

            verify(document).add(paragraphCaptor.capture());
            assertArrayEquals(new String[]{"First Name: John"}, new String[]{paragraphCaptor.getValue().getContent()});
        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testGeneratePdf() throws Exception {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        when(profileData.getProfileId()).thenReturn("123");
        when(profileData.getProfileType()).thenReturn("0");

        try {
            Method method = PdfGenerator.class.getDeclaredMethod("generatePdf", ProfileDetail.class);
            method.setAccessible(true);
            byte[] pdfBytes = (byte[]) method.invoke(null, profileData);

            assertNotNull(pdfBytes);
            assertTrue(pdfBytes.length > 0);
        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }
    }
}
