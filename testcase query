import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class QueryGeneratorTest {

    private QueryGenerator queryGenerator;

    @Before
    public void setUp() {
        queryGenerator = new QueryGeneratorImpl();
    }

    @Test
    public void testSetWorkbenchRequest() {
        WorkbenchRequest workbenchRequest = mock(WorkbenchRequest.class);
        queryGenerator.setWorkbenchRequest(workbenchRequest);
        assertEquals(workbenchRequest, queryGenerator.workbenchRequest);
    }

    @Test
    public void testSetColumnSelector() {
        ColumnSelector columnSelector = mock(ColumnSelector.class);
        queryGenerator.setColumnSelector(columnSelector);
        assertEquals(columnSelector, queryGenerator.columnSelector);
    }

    @Test
    public void testSetFixedQuery() {
        String fixedQuery = "SELECT * FROM table";
        queryGenerator.setFixedQuery(fixedQuery);
        assertEquals(fixedQuery, queryGenerator.getFixedQuery());
    }

    @Test
    public void testBuildQueryWithSortingAndPagination() {
        WorkbenchRequest workbenchRequest = mock(WorkbenchRequest.class);
        ColumnSelector columnSelector = mock(ColumnSelector.class);

        queryGenerator.setWorkbenchRequest(workbenchRequest);
        queryGenerator.setColumnSelector(columnSelector);
        queryGenerator.setFixedQuery("SELECT * FROM table");

        when(workbenchRequest.getSortColumn()).thenReturn("column");
        when(workbenchRequest.getSortDirectionList()).thenReturn("ASC");
        when(workbenchRequest.getPageNo()).thenReturn(1);
        when(workbenchRequest.getPageSize()).thenReturn(10);
        when(columnSelector.getcolumnMetaData("column"))
                .thenReturn(new ColumnMetaData("column", "column", "column", true, "VARCHAR", "VARCHAR", true, false, true));

        String result = queryGenerator.buildQuery();
        assertNotNull(result);

        assertTrue(result.contains("ORDER BY column ASC"));
        assertTrue(result.contains("OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY"));
    }

    @Test
    public void testBuildQueryWithWhereClause() {
        WorkbenchRequest workbenchRequest = mock(WorkbenchRequest.class);
        ColumnSelector columnSelector = mock(ColumnSelector.class);

        queryGenerator.setWorkbenchRequest(workbenchRequest);
        queryGenerator.setColumnSelector(columnSelector);
        queryGenerator.setFixedQuery("SELECT * FROM table");

        SearchCriteria searchCriteria = new SearchCriteria("Name", "name", "=", "John");
        when(workbenchRequest.getSearchCriterialist()).thenReturn(Arrays.asList(searchCriteria));
        when(columnSelector.getColumnMetabata("name"))
                .thenReturn(new ColumnMetaData("Name", "name", "name", true, "VARCHAR", "VARCHAR", true, false, true));

        String result = queryGenerator.buildQuery();
        assertNotNull(result);

        assertTrue(result.contains("AND name = :param0"));
    }

    @Test
    public void testBuildQueryWithMultipleWhereClauses() {
        WorkbenchRequest workbenchRequest = mock(WorkbenchRequest.class);
        ColumnSelector columnSelector = mock(ColumnSelector.class);

        queryGenerator.setWorkbenchRequest(workbenchRequest);
        queryGenerator.setColumnSelector(columnSelector);
        queryGenerator.setFixedQuery("SELECT * FROM table");

        SearchCriteria criteria1 = new SearchCriteria("Name", "name", "=", "John");
        SearchCriteria criteria2 = new SearchCriteria("Age", "age", "=", 25);

        when(workbenchRequest.getSearchCriterialist()).thenReturn(Arrays.asList(criteria1, criteria2));
        when(columnSelector.getColumnMetabata("name"))
                .thenReturn(new ColumnMetaData("Name", "name", "name", true, "VARCHAR", "VARCHAR", true, false, true));
        when(columnSelector.getColumnMetabata("age"))
                .thenReturn(new ColumnMetaData("Age", "age", "age", true, "INTEGER", "INTEGER", true, false, true));

        String result = queryGenerator.buildQuery();
        assertNotNull(result);

        assertTrue(result.contains("AND name = :param0"));
        assertTrue(result.contains("AND age = :param1"));
    }

    // Add more test cases for other methods and edge cases
}
