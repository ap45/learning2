public class ProfileSearchResultDTO {
    private Profile profile;
    private List<Interests> interests;
    private List<Posts> posts;
    private ContactInfo contactInfo;

    // Getters and setters
}



@Component
public class SearchMapping {
    private final Map<String, Class<?>> columnToEntityMapping;

    public SearchMapping() {
        // Initialize the mapping of searchable columns to entity classes
        columnToEntityMapping = new HashMap<>();
        columnToEntityMapping.put("name", Profile.class);
        columnToEntityMapping.put("interestName", Interests.class);
        columnToEntityMapping.put("postText", Posts.class);
        columnToEntityMapping.put("email", ContactInfo.class);
        columnToEntityMapping.put("phone", ContactInfo.class);
        // Add more columns and entities as needed
    }

    public Class<?> getEntityClass(String columnName) {
        return columnToEntityMapping.get(columnName);
    }
}


//////
@Service
public class SearchService {
    @Autowired
    private EntityManager entityManager;

    @Autowired
    private SearchMapping searchMapping;

    public List<ProfileSearchResultDTO> search(String searchColumn, String searchValue) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<ProfileSearchResultDTO> query = cb.createQuery(ProfileSearchResultDTO.class);

        Root<Profile> profileRoot = query.from(Profile.class);

        Class<?> entityClass = searchMapping.getEntityClass(searchColumn);

        if (entityClass != null) {
            Join<Profile, Object> join = profileRoot.join(searchColumn, JoinType.LEFT);

            Predicate searchPredicate = cb.like(join.get(searchColumn), "%" + searchValue + "%");

            query.where(searchPredicate);
            query.select(profileRoot);

            TypedQuery<ProfileSearchResultDTO> typedQuery = entityManager.createQuery(query);
            List<ProfileSearchResultDTO> searchResults = typedQuery.getResultList();

            return searchResults;
        } else {
            return Collections.emptyList();
        }
    }
}




///


package com.yourcompany.controller;

import com.yourcompany.search.SearchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
public class SearchController {
    @Autowired
    private SearchService searchService;

    @GetMapping("/search")
    public ResponseEntity<Object> search(
            @RequestParam String columnName,
            @RequestParam String searchValue) {
        Object searchResults = searchService.search(columnName, searchValue);
        return ResponseEntity.ok(searchResults);
    }
}
