import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.Collections;

import static org.mockito.Mockito.*;

public class WorkbenchControllerTest {

    @Mock
    private WorkbenchServiceFactory workbenchServiceFactory;

    @Mock
    private WorkbenchService<SearchResult> workbenchService;

    @InjectMocks
    private WorkbenchController workbenchController;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    private WorkbenchRequest createSampleRequest(String gridId) {
        return new WorkbenchRequest(gridId, Arrays.asList(new SearchCriteria("profileID", "=", 1002843629)), "", "", 1, 50);
    }

    private WorkbenchResponse<SearchResult> createSampleResponse() {
        SearchResult searchResult = new SearchResult();
        searchResult.setFirstName("Muhammed Khairiz");
        searchResult.setLastName("Khalid");

        return new WorkbenchResponse<>(Collections.singletonList(searchResult), 1, 1);
    }

    @Test
    public void testGetWorkbenchData_ProfileSearchGrid() {
        // Arrange
        WorkbenchRequest workbenchRequest = createSampleRequest("PROFILE_SEARCH_GRID");

        when(workbenchServiceFactory.getService(SearchResult.class)).thenReturn(workbenchService);
        when(workbenchService.getWorkbenchData(workbenchRequest)).thenReturn(createSampleResponse());

        // Act
        ResponseEntity<WorkbenchResponse<?>> response = workbenchController.getWorkbenchData(workbenchRequest);

        // Assert
        assertResponse(response, SearchResult.class);
    }

    @Test
    public void testGetWorkbenchData_SourceListGrid() {
        // Arrange
        WorkbenchRequest workbenchRequest = createSampleRequest("SOURCE_LIST_GRID");

        when(workbenchServiceFactory.getService(SourceListResult.class)).thenReturn(workbenchService);
        when(workbenchService.getWorkbenchData(workbenchRequest)).thenReturn(createSampleResponse());

        // Act
        ResponseEntity<WorkbenchResponse<?>> response = workbenchController.getWorkbenchData(workbenchRequest);

        // Assert
        assertResponse(response, SourceListResult.class);
    }

    @Test
    public void testGetWorkbenchData_DetermineGenericType_ProfileSearchGrid() {
        // Arrange
        WorkbenchRequest workbenchRequest = createSampleRequest("PROFILE_SEARCH_GRID");

        when(workbenchServiceFactory.getService(SearchResult.class)).thenReturn(workbenchService);
        when(workbenchService.getWorkbenchData(workbenchRequest)).thenReturn(createSampleResponse());

        // Act
        ResponseEntity<WorkbenchResponse<?>> response = workbenchController.getWorkbenchData(workbenchRequest);

        // Assert
        assertResponse(response, SearchResult.class);

        // Additional Assertions for determining generic type
        Class<?> determinedClass = workbenchController.determineGenericTypes("PROFILE_SEARCH_GRID");
        Assert.assertEquals(SearchResult.class, determinedClass);
    }

    // Add more test cases as needed

    private void assertResponse(ResponseEntity<WorkbenchResponse<?>> response, Class<?> expectedClass) {
        Assert.assertNotNull(response);
        Assert.assertEquals(200, response.getStatusCodeValue());
        Assert.assertNotNull(response.getBody());
        WorkbenchResponse<?> responseBody = response.getBody();
        Assert.assertEquals(1, responseBody.getTotalElements());
        Assert.assertEquals(1, responseBody.getTotalPages());
        Assert.assertNotNull(responseBody.getData());
        Assert.assertEquals(1, responseBody.getData().size());
        Assert.assertEquals(expectedClass, responseBody.getData().get(0).getClass());
    }
}
