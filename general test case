import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

public class WorkbenchControllerTest {

    @Mock
    private WorkbenchServiceFactory workbenchServiceFactory;

    @InjectMocks
    private WorkbenchController workbenchController;

    @Mock
    private WorkbenchService<SearchResult> workbenchService;

    @Mock
    private WorkbenchService<SourceListResult> sourceListService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetWorkbenchData_Successful_ProfileSearchGrid() {
        // Arrange
        WorkbenchRequest workbenchRequest = new WorkbenchRequest("PROFILE_SEARCH_GRID",
                Arrays.asList(new SearchCriteria("profileID", "=", 12843629)), "", "", 1, 50);

        when(workbenchServiceFactory.getService(SearchResult.class)).thenReturn(workbenchService);

        SearchResult searchResult = new SearchResult();
        searchResult.setFirstName("Mmed Khaiz");
        searchResult.setLastName("alid");

        WorkbenchResponse<SearchResult> workbenchResponse = new WorkbenchResponse<>(Collections.singletonList(searchResult), 1, 1);
        when(workbenchService.getWorkbenchData(workbenchRequest)).thenReturn(workbenchResponse);

        // Act
        ResponseEntity<WorkbenchResponse<?>> response = workbenchController.getWorkbenchData(workbenchRequest);

        // Assert
        Assert.assertNotNull(response);
        Assert.assertEquals(200, response.getStatusCodeValue());
        Assert.assertNotNull(response.getBody());
        WorkbenchResponse<?> responseBody = response.getBody();
        Assert.assertEquals(1, responseBody.getTotalElements());
        Assert.assertEquals(1, responseBody.getTotalPages());
        Assert.assertNotNull(responseBody.getData());
        Assert.assertEquals(1, responseBody.getData().size());
        SearchResult result = (SearchResult) responseBody.getData().get(0);
        Assert.assertEquals("Mumd Khairiz", result.getFirstName());
        // Assert other properties...
    }

    @Test
    public void testGetWorkbenchData_Successful_SourceListGrid() {
        // Arrange
        WorkbenchRequest workbenchRequest = new WorkbenchRequest("SOURCELIST_GRID",
                Arrays.asList(new SearchCriteria("profileID", "=", 12345)), "", "", 1, 50);

        when(workbenchServiceFactory.getService(SourceListResult.class)).thenReturn(sourceListService);

        SourceListResult sourceListResult = new SourceListResult();
        sourceListResult.setSourceName("Sample Source");
        sourceListResult.setSourceDescription("This is a sample source.");

        WorkbenchResponse<SourceListResult> workbenchResponse = new WorkbenchResponse<>(Collections.singletonList(sourceListResult), 1, 1);
        when(sourceListService.getWorkbenchData(workbenchRequest)).thenReturn(workbenchResponse);

        // Act
        ResponseEntity<WorkbenchResponse<?>> response = workbenchController.getWorkbenchData(workbenchRequest);

        // Assert
        Assert.assertNotNull(response);
        Assert.assertEquals(200, response.getStatusCodeValue());
        Assert.assertNotNull(response.getBody());
        WorkbenchResponse<?> responseBody = response.getBody();
        Assert.assertEquals(1, responseBody.getTotalElements());
        Assert.assertEquals(1, responseBody.getTotalPages());
        Assert.assertNotNull(responseBody.getData());
        Assert.assertEquals(1, responseBody.getData().size());
        SourceListResult result = (SourceListResult) responseBody.getData().get(0);
        Assert.assertEquals("Sample Source", result.getSourceName());
        // Assert other properties...
    }

    @Test
    public void testGetWorkbenchData_InvalidGrid() {
        // Arrange
        WorkbenchRequest workbenchRequest = new WorkbenchRequest("INVALID_GRID",
                Collections.singletonList(new SearchCriteria("profileID", "=", 1002843629)), "", "", 1, 50);

        // Act
        ResponseEntity<WorkbenchResponse<?>> response = workbenchController.getWorkbenchData(workbenchRequest);

        // Assert
        Assert.assertNotNull(response);
        Assert.assertEquals(400, response.getStatusCodeValue());
        // Assert other error details...
    }

    @Test
    public void testDetermineGenericTypes() {
        // Arrange
        String profileSearchGrid = "PROFILE_SEARCH_GRID";
        String sourceListGrid = "SOURCELIST_GRID";

        // Act
        Class<?> profileSearchClass = workbenchController.determineGenericTypes(profileSearchGrid);
        Class<?> sourceListClass = workbenchController.determineGenericTypes(sourceListGrid);

        // Assert
        Assert.assertEquals(SearchResult.class, profileSearchClass);
        Assert.assertEquals(SourceListResult.class, sourceListClass);
    }
}
