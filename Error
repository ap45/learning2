@Service
public class SearchService {
    @Autowired
    private EntityManager entityManager;

    public List<?> search(String columnName, String value) {
        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<Object> query = criteriaBuilder.createQuery(Object.class);

        Root<?> root = getRootByColumnName(columnName, query);
        query.select(root);

        addPredicate(criteriaBuilder, root, columnName, value, query);

        TypedQuery<Object> typedQuery = entityManager.createQuery(query);
        return typedQuery.getResultList();
    }

    private Root<?> getRootByColumnName(String columnName, CriteriaQuery<?> query) {
        Metamodel metamodel = entityManager.getMetamodel();
        List<EntityType<?>> entityTypes = new ArrayList<>(metamodel.getEntities());

        for (EntityType<?> entityType : entityTypes) {
            if (entityType.getAttribute(columnName) != null) {
                return query.from(entityType.getJavaType());
            }
        }
        throw new IllegalArgumentException("Column name not found in any entity.");
    }

    private void addPredicate(CriteriaBuilder criteriaBuilder, Root<?> root,
                              String columnName, String value, CriteriaQuery<?> query) {
        Path<?> columnPath = root.get(columnName);
        Predicate predicate = criteriaBuilder.equal(criteriaBuilder.lower(columnPath), value.toLowerCase());
        query.where(predicate);
    }
}




@Service
public class SearchService {
    @Autowired
    private EntityManager entityManager;

    public List<?> search(String columnName, String value) {
        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<?> query = criteriaBuilder.createQuery();

        Metamodel metamodel = entityManager.getMetamodel();
        EntityType<Profile> profileEntityType = metamodel.entity(Profile.class);

        Root<?> root = query.from(profileEntityType);
        
        Predicate predicate = addPredicate(criteriaBuilder, root, columnName, value);
        
        query.select(root);
        query.where(predicate);

        TypedQuery<?> typedQuery = entityManager.createQuery(query);
        return typedQuery.getResultList();
    }

    private Predicate addPredicate(CriteriaBuilder criteriaBuilder, Root<?> root,
                                   String columnName, String value) {
        Metamodel metamodel = entityManager.getMetamodel();

        for (EntityType<?> entityType : metamodel.getEntities()) {
            SingularAttribute<?, ?> attribute = entityType.getSingularAttribute(columnName, String.class);
            if (attribute != null) {
                Path<String> columnPath = root.get(attribute);
                return criteriaBuilder.equal(criteriaBuilder.lower(columnPath), value.toLowerCase());
            }
        }
        
        // Return a dummy predicate if attribute is not found
        return criteriaBuilder.disjunction();
    }
}
///////
@Service
public class SearchService {
    @Autowired
    private EntityManager entityManager;

    public List<?> search(String columnName, String value) {
        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<?> query = criteriaBuilder.createQuery();

        Metamodel metamodel = entityManager.getMetamodel();
        EntityType<?> entityType = findEntityType(metamodel, columnName);

        if (entityType != null) {
            Root<?> root = query.from(entityType.getJavaType());
            query.select(root);

            Predicate predicate = createPredicate(criteriaBuilder, root, columnName, value);
            query.where(predicate);

            TypedQuery<?> typedQuery = entityManager.createQuery(query);
            return typedQuery.getResultList();
        } else {
            return Collections.emptyList();
        }
    }

    private EntityType<?> findEntityType(Metamodel metamodel, String columnName) {
        for (EntityType<?> entityType : metamodel.getEntities()) {
            if (entityType.getSingularAttribute(columnName, String.class) != null) {
                return entityType;
            }
        }
        return null;
    }

    private Predicate createPredicate(CriteriaBuilder criteriaBuilder, Root<?> root,
                                      String columnName, String value) {
        Path<String> columnPath = root.get(columnName);
        return criteriaBuilder.equal(criteriaBuilder.lower(columnPath), value.toLowerCase());
    }
}
