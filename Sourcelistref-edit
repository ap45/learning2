import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.time.LocalDateTime;
import java.util.Optional;

import org.junit.Before;
import org.junit.Test;

public class SourceListServiceTest {

    private SourceListService sourceListService;
    private RpmSrcListRefTEntityRepository rpmSrcListRefTEntityRepository;

    @Before
    public void setUp() {
        rpmSrcListRefTEntityRepository = mock(RpmSrcListRefTEntityRepository.class);
        sourceListService = new SourceListService(rpmSrcListRefTEntityRepository);
    }

    @Test
    public void testCreateSourceList() {
        SourceListCreateData createData = createMockCreateData();
        RpmSrcListRefTEntity sourceList = new RpmSrcListRefTEntity();
        when(rpmSrcListRefTEntityRepository.save(any())).thenReturn(sourceList);

        sourceListService.createSourceList(createData);

        verify(rpmSrcListRefTEntityRepository, times(1)).save(any());

        assertNotNull(sourceList.getSlCreatedOn());
        assertEquals("1", sourceList.getSlisTec());
    }

    @Test
    public void testEditSourceList() {
        Integer id = 1;
        SourceListCreateData editData = createMockEditData();
        Optional<RpmSrcListRefTEntity> optionalSourceList = Optional.of(new RpmSrcListRefTEntity());
        when(rpmSrcListRefTEntityRepository.findById(id)).thenReturn(optionalSourceList);
        when(rpmSrcListRefTEntityRepository.save(any())).thenReturn(new RpmSrcListRefTEntity());

        sourceListService.editSourceList(id, editData);

        verify(rpmSrcListRefTEntityRepository, times(1)).findById(id);
        verify(rpmSrcListRefTEntityRepository, times(1)).save(any());

        assertNotNull(optionalSourceList.get().getSlModifiedOn());
        assertEquals("2", optionalSourceList.get().getSlSpeclTretmnt());
    }

    @Test(expected = ResourceUpdationException.class)
    public void testEditSourceListWithInvalidId() {
        Integer id = 1;
        SourceListCreateData editData = createMockEditData();
        when(rpmSrcListRefTEntityRepository.findById(id)).thenReturn(Optional.empty());

        sourceListService.editSourceList(id, editData);
    }

    @Test(expected = ResourceCreationException.class)
    public void testCreateSourceListWithException() {
        SourceListCreateData createData = createMockCreateData();
        when(rpmSrcListRefTEntityRepository.save(any())).thenThrow(new RuntimeException("Test Exception"));

        sourceListService.createSourceList(createData);
    }

    private SourceListCreateData createMockCreateData() {
        return SourceListCreateData.builder()
                .sourceListTitle("Test Source List")
                .sourceListCategory("Test Category")
                .sourceListCategoryId(1)
                .sourceListIssueCountry("Test Country")
                .sourceListIssueCountryId("1")
                .regulatoryAuthority("Test Authority")
                .regulatoryAuthorityid(1)
                .sanctionsRelevantFlag("Y")
                .sourceListBusörpId(1)
                .sourceListBusGrp("Test Group")
                .sourceListStatus("Active")
                .description("Test Description")
                .provider("Test Provider")
                .sourceListProId(1)
                .official(true)
                .specialTreatment("Test Treatment")
                .slIsTech("1")
                .sourcelistSancSrcCatId(1)
                .created0n(LocalDateTime.now())
                .updatedon(LocalDateTime.now())
                .build();
    }

    private SourceListCreateData createMockEditData() {
        return SourceListCreateData.builder()
                .sourceListTitle("Updated Source List")
                .sourceListCategory("Updated Category")
                .sourceListCategoryId(2)
                .sourceListIssueCountry("Updated Country")
                .sourceListIssueCountryId("2")
                .regulatoryAuthority("Updated Authority")
                .regulatoryAuthorityid(2)
                .sanctionsRelevantFlag("N")
                .sourceListBusörpId(2)
                .sourceListBusGrp("Updated Group")
                .sourceListStatus("Inactive")
                .description("Updated Description")
                .provider("Updated Provider")
                .sourceListProId(2)
                .official(false)
                .specialTreatment("Updated Treatment")
                .slIsTech("2")
                .sourcelistSancSrcCatId(2)
                .created0n(LocalDateTime.now().minusDays(1))
                .updatedon(LocalDateTime.now())
                .build();
    }
}
