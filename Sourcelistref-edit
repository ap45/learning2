import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.time.LocalDateTime;
import java.util.Optional;

import org.junit.Before;
import org.junit.Test;

public class SourceListServiceTest {

    private SourceListService sourceListService;
    private RpmSrcListRefTEntityRepository rpmSrcListRefTEntityRepository;

    @Before
    public void setUp() {
        rpmSrcListRefTEntityRepository = mock(RpmSrcListRefTEntityRepository.class);
        sourceListService = new SourceListService(rpmSrcListRefTEntityRepository);
    }

    @Test
    public void testCreateSourceList() {
        SourceListCreateData createData = createMockCreateData();
        RpmSrcListRefTEntity sourceList = new RpmSrcListRefTEntity();
        when(rpmSrcListRefTEntityRepository.save(any())).thenReturn(sourceList);

        sourceListService.createSourceList(createData);

        verify(rpmSrcListRefTEntityRepository, times(1)).save(any());
    }

    @Test
    public void testEditSourceList() {
        Integer id = 1;
        SourceListCreateData editData = createMockCreateData();
        Optional<RpmSrcListRefTEntity> optionalSourceList = Optional.of(new RpmSrcListRefTEntity());
        when(rpmSrcListRefTEntityRepository.findById(id)).thenReturn(optionalSourceList);
        when(rpmSrcListRefTEntityRepository.save(any())).thenReturn(new RpmSrcListRefTEntity());

        sourceListService.editSourceList(id, editData);

        verify(rpmSrcListRefTEntityRepository, times(1)).findById(id);
        verify(rpmSrcListRefTEntityRepository, times(1)).save(any());
    }

    @Test(expected = ResourceUpdationException.class)
    public void testEditSourceListWithInvalidId() {
        Integer id = 1;
        SourceListCreateData editData = createMockCreateData();
        when(rpmSrcListRefTEntityRepository.findById(id)).thenReturn(Optional.empty());

        sourceListService.editSourceList(id, editData);
    }

    // Additional test cases can be added with different mock data

    private SourceListCreateData createMockCreateData() {
        return SourceListCreateData.builder()
                .sourceListTitle("Test Source List")
                .sourceListCategory("Test Category")
                .sourceListCategoryId(1)
                .sourceListIssueCountry("Test Country")
                .sourceListIssueCountryId("1")
                .regulatoryAuthority("Test Authority")
                .regulatoryAuthorityid(1)
                .sanctionsRelevantFlag("Y")
                .sourceListBus√∂rpId(1)
                .sourceListBusGrp("Test Group")
                .sourceListStatus("Active")
                .description("Test Description")
                .provider("Test Provider")
                .sourceListProId(1)
                .official(true)
                .specialTreatment("Test Treatment")
                .slIsTech("1")
                .sourcelistSancSrcCatId(1)
                .created0n(LocalDateTime.now())
                .updatedon(LocalDateTime.now())
                .build();
    }
}
