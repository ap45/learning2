import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;

class SQLQueryReaderTest {

    @Test
    void testGetSqlQuery() throws IOException {
        // Mocking the ClassLoader and InputStream
        ClassLoader classLoaderMock = Mockito.mock(ClassLoader.class);
        InputStream inputStreamMock = new ByteArrayInputStream("-- key1\nSELECT * FROM table1;\n-- key2\nSELECT * FROM table2;".getBytes());

        // Mocking the getResourceAsStream method
        Mockito.when(classLoaderMock.getResourceAsStream(any())).thenReturn(inputStreamMock);

        // Mocking the SQLQueryReader class
        Mockito.when(SQLQueryReader.getClassLoader()).thenReturn(classLoaderMock);

        // Calling the actual method
        Map<String, String> sqlQueries = SQLQueryReader.getSqlQuery();

        // Verifying the expected behavior
        assertEquals(2, sqlQueries.size());
        assertEquals("SELECT * FROM table1;", sqlQueries.get("key1"));
        assertEquals("SELECT * FROM table2;", sqlQueries.get("key2"));
    }

    @Test
    void testGetSqlQueryResourceNotFound() {
        // Mocking the ClassLoader to simulate resource not found
        ClassLoader classLoaderMock = Mockito.mock(ClassLoader.class);
        Mockito.when(classLoaderMock.getResourceAsStream(any())).thenReturn(null);

        // Mocking the SQLQueryReader class
        Mockito.when(SQLQueryReader.getClassLoader()).thenReturn(classLoaderMock);

        // Calling the method and asserting an exception is thrown
        assertThrows(FileNotFoundException.class, SQLQueryReader::getSqlQuery);
    }

    @Test
    void testGetSqlQueryIOException() throws IOException {
        // Mocking the ClassLoader and InputStream to simulate an IOException
        ClassLoader classLoaderMock = Mockito.mock(ClassLoader.class);
        InputStream inputStreamMock = Mockito.mock(InputStream.class);
        Mockito.when(inputStreamMock.read()).thenThrow(new IOException("Simulated IOException"));

        // Mocking the getResourceAsStream method
        Mockito.when(classLoaderMock.getResourceAsStream(any())).thenReturn(inputStreamMock);

        // Mocking the SQLQueryReader class
        Mockito.when(SQLQueryReader.getClassLoader()).thenReturn(classLoaderMock);

        // Calling the method and asserting an exception is thrown
        assertThrows(ExcelCreationException.class, SQLQueryReader::getSqlQuery);
    }
}
