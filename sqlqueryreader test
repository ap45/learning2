import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SQLQueryReaderTest {

    @Test
    void testGetSqlQuery() throws IOException {
        String testContent = "--key1\nSELECT * FROM table1;\n--key2\nSELECT * FROM table2;";
        InputStream inputStream = new ByteArrayInputStream(testContent.getBytes());

        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader.class::getClassLoader).thenReturn(SQLQueryReader.class.getClassLoader());
            mockedStatic.when(() -> SQLQueryReader.class.getClassLoader().getResourceAsStream(anyString()))
                    .thenReturn(inputStream);

            Map<String, String> sqlQueries = SQLQueryReader.getSqlQuery();

            assertNotNull(sqlQueries);
            assertEquals(2, sqlQueries.size());
            assertTrue(sqlQueries.containsKey("key1"));
            assertTrue(sqlQueries.containsKey("key2"));
            assertEquals("SELECT * FROM table1;", sqlQueries.get("key1"));
            assertEquals("SELECT * FROM table2;", sqlQueries.get("key2"));
        }
    }

    @Test
    void testGetSqlQuery_ResourceNotFound() {
        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader.class::getClassLoader).thenReturn(SQLQueryReader.class.getClassLoader());
            mockedStatic.when(() -> SQLQueryReader.class.getClassLoader().getResourceAsStream(anyString()))
                    .thenReturn(null);

            assertThrows(FileNotFoundException.class, SQLQueryReader::getSqlQuery);
        }
    }

    @Test
    void testGetSqlQuery_IOException() throws IOException {
        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            mockedStatic.when(SQLQueryReader.class::getClassLoader).thenReturn(SQLQueryReader.class.getClassLoader());
            mockedStatic.when(() -> SQLQueryReader.class.getClassLoader().getResourceAsStream(anyString()))
                    .thenThrow(new IOException("Test IOException"));

            assertThrows(ExcelCreationException.class, SQLQueryReader::getSqlQuery);
        }
    }
}
