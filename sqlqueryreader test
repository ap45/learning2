import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class SQLQueryReaderTest {

    @Test
    void testGetSqlQuery() throws IOException {
        // Mocking dependencies
        ClassLoader classLoaderMock = mock(ClassLoader.class);
        InputStream inputStreamMock = mock(InputStream.class);

        // Mocking the getResourceAsStream method
        when(classLoaderMock.getResourceAsStream(anyString())).thenReturn(inputStreamMock);

        // Mocking the content of the input stream
        String fileContent = "--key1\nSELECT * FROM table1;\n--key2\nSELECT * FROM table2;";
        InputStream mockInputStream = new ByteArrayInputStream(fileContent.getBytes(StandardCharsets.UTF_8));
        when(inputStreamMock.read()).thenReturn(-1); // simulate end of stream
        when(classLoaderMock.getResourceAsStream(anyString())).thenReturn(mockInputStream);

        // Test the SQLQueryReader
        Map<String, String> sqlQueries = SQLQueryReader.getSqlQuery(classLoaderMock);

        // Verify that getResourceAsStream is called with the correct argument
        verify(classLoaderMock).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);

        // Verify that the InputStream is closed
        verify(inputStreamMock).close();

        // Verify the contents of the map
        assertEquals(2, sqlQueries.size());
        assertEquals("SELECT * FROM table1;", sqlQueries.get("key1"));
        assertEquals("SELECT * FROM table2;", sqlQueries.get("key2"));
    }
}
