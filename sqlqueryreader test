import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.BufferedReader;
import java.util.Map;
import java.util.HashMap;

class SQLQueryReaderTest {

    @Mock
    private ClassLoader classLoader;

    @Mock
    private InputStream inputStream;

    @Mock
    private BufferedReader bufferedReader;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetSqlQuery() throws IOException {
        // Mocking
        when(classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(inputStream);
        when(bufferedReader.readLine()).thenReturn("SELECT * FROM table1;", "-- Key1", "SELECT * FROM table2;", null);

        // Test
        Map<String, String> sqlQueries = SQLQueryReader.getSqlQuery();

        // Verification
        verify(classLoader).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);
        verify(inputStream).close();
        verify(bufferedReader, times(4)).readLine();

        // Assertions
        assertNotNull(sqlQueries);
        assertEquals(2, sqlQueries.size());
        assertEquals("SELECT * FROM table1;", sqlQueries.get(""));
        assertEquals("SELECT * FROM table2;", sqlQueries.get("Key1"));
    }

    @Test
    void testGetSqlQuery_ResourceNotFound() throws IOException {
        // Mocking
        when(classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(null);

        // Test and Verification
        FileNotFoundException exception = assertThrows(FileNotFoundException.class, () -> {
            SQLQueryReader.getSqlQuery();
        });

        assertEquals("Resource not found: grid_queries.sql", exception.getMessage());
        verify(classLoader).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);
    }

    @Test
    void testGetSqlQuery_IOException() throws IOException {
        // Mocking
        when(classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(inputStream);
        when(bufferedReader.readLine()).thenThrow(new IOException("Test IOException"));

        // Test and Verification
        ExcelCreationException exception = assertThrows(ExcelCreationException.class, () -> {
            SQLQueryReader.getSqlQuery();
        });

        assertEquals("Error occurred while reading SQL from file Test IOException", exception.getMessage());
        verify(classLoader).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);
        verify(inputStream).close();
        verify(bufferedReader).readLine();
    }
}
