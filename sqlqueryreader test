import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SQLQueryReaderTest {

    @Mock
    private ClassLoader classLoader;

    @Mock
    private InputStream inputStream;

    @Mock
    private BufferedReader bufferedReader;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetSqlQuery() throws IOException {
        // Mock the necessary dependencies
        when(classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(inputStream);
        when(new BufferedReader(any())).thenReturn(bufferedReader);

        // Mock the content of the input stream
        when(bufferedReader.readLine())
                .thenReturn("SELECT * FROM table1 --query1")
                .thenReturn("WHERE condition1;")
                .thenReturn("SELECT column FROM table2 --query2")
                .thenReturn("WHERE condition2;")
                .thenReturn(null); // End of file

        // Call the method to be tested
        Map<String, String> sqlQueries = SQLQueryReader.getSqlQuery();

        // Verify the results
        assertNotNull(sqlQueries);
        assertEquals(2, sqlQueries.size());
        assertEquals("SELECT * FROM table1 WHERE condition1;", sqlQueries.get("query1"));
        assertEquals("SELECT column FROM table2 WHERE condition2;", sqlQueries.get("query2"));

        // Verify interactions with mocks
        verify(classLoader, times(1)).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);
        verify(bufferedReader, times(4)).readLine(); // 4 lines in the mocked file
        verify(bufferedReader, times(1)).close(); // Ensure the BufferedReader is closed
    }

    @Test
    void testGetSqlQueryFileNotFound() throws IOException {
        // Mock the case where the resource is not found
        when(classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(null);

        // Call the method to be tested and expect an exception
        assertThrows(FileNotFoundException.class, SQLQueryReader::getSqlQuery);

        // Verify interactions with mocks
        verify(classLoader, times(1)).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);
        verify(bufferedReader, never()).readLine(); // Ensure readLine is not called
    }

    @Test
    void testGetSqlQueryIOException() throws IOException {
        // Mock the case where an IOException occurs
        when(classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(inputStream);
        when(new BufferedReader(any())).thenThrow(new IOException("Mocked IOException"));

        // Call the method to be tested and expect an exception
        assertThrows(ExcelCreationException.class, SQLQueryReader::getSqlQuery);

        // Verify interactions with mocks
        verify(classLoader, times(1)).getResourceAsStream(ClassConstants.GRID_QUERY_FILE);
        verify(bufferedReader, times(1)).readLine(); // Ensure readLine is called once before the exception
        verify(bufferedReader, times(1)).close(); // Ensure the BufferedReader is closed even if an exception occurs
    }
}
