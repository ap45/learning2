import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
public class SQLQueryReaderTest {

    @Test
    public void testGetSqlQuery() throws IOException {
        // Arrange
        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {
            ClassLoader classLoader = mock(ClassLoader.class);
            InputStream inputStream = mock(InputStream.class);

            mockedStatic.when(() -> SQLQueryReader.class.getClassLoader()).thenReturn(classLoader);
            mockedStatic.when(() -> classLoader.getResourceAsStream(ClassConstants.GRID_QUERY_FILE)).thenReturn(inputStream);

            when(inputStream.read()).thenReturn((int) '-').thenReturn((int) '-').thenReturn((int) '\n').thenReturn((int) 'S').thenReturn((int) 'E').thenReturn((int) 'L').thenReturn((int) 'E').thenReturn((int) 'C').thenReturn((int) 'T').thenReturn((int) ' ').thenReturn((int) '*').thenReturn((int) '-').thenReturn((int) '-').thenReturn((int) '\n').thenReturn((int) 'F').thenReturn((int) 'R').thenReturn((int) 'O').thenReturn((int) 'M').thenReturn((int) ' ').thenReturn((int) 'm').thenReturn((int) 'y').thenReturn((int) 't').thenReturn((int) 'a').thenReturn((int) 'b').thenReturn((int) 'l').thenReturn((int) 'e').thenReturn((int) '\n').thenReturn((int) ';').thenReturn((int) '\n').thenReturn((int) '\n');

            // Act
            Map<String, String> result = SQLQueryReader.getSqlQuery();

            // Assert
            assertNotNull(result);
            assertEquals(1, result.size());
            assertTrue(result.containsKey("SELECT *"));
            assertEquals("FROM mytable", result.get("SELECT *"));
        }
    }
}
