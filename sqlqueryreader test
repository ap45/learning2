import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.MockedStatic;
import org.springframework.boot.test.context.SpringBootTest;

import java.io.*;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class SQLQueryReaderTest {

    @InjectMocks
    private SQLQueryReader sqlQueryReader;

    @Mock
    private BufferedReader mockBufferedReader;

    @Test
    void testGetSqlQuery() throws IOException {
        String queryFileContent = "--query1\nSELECT * FROM table1;\n--query2\nSELECT * FROM table2;";
        InputStream inputStream = new ByteArrayInputStream(queryFileContent.getBytes());

        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {

            mockedStatic.when(() -> SQLQueryReader.classLoader).thenReturn(SQLQueryReader.class.getClassLoader());
            mockedStatic.when(() -> SQLQueryReader.classLoader.getResourceAsStream(any())).thenReturn(inputStream);

            when(new BufferedReader(any(Reader.class))).thenReturn(mockBufferedReader);
            when(mockBufferedReader.readLine()).thenReturn("SELECT * FROM table1;", "--query2", "SELECT * FROM table2;", null);

            // Act
            Map<String, String> sqlQueries = sqlQueryReader.getSqlQuery();

            // Assert
            assertEquals(2, sqlQueries.size());
            assertEquals("SELECT * FROM table1;", sqlQueries.get("query1"));
            assertEquals("SELECT * FROM table2;", sqlQueries.get("query2"));
        }
    }

    @Test
    void testGetSqlQuery_ResourceNotFound() {
        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {

            mockedStatic.when(() -> SQLQueryReader.classLoader).thenReturn(SQLQueryReader.class.getClassLoader());
            mockedStatic.when(() -> SQLQueryReader.classLoader.getResourceAsStream(any())).thenReturn(null);

            // Act and Assert
            FileNotFoundException exception = assertThrows(FileNotFoundException.class, () -> sqlQueryReader.getSqlQuery());
            assertEquals("Resource not found: grid_queries.sql", exception.getMessage());
        }
    }

    @Test
    void testGetSqlQuery_IOException() throws IOException {
        try (MockedStatic<SQLQueryReader> mockedStatic = mockStatic(SQLQueryReader.class)) {

            mockedStatic.when(() -> SQLQueryReader.classLoader).thenReturn(SQLQueryReader.class.getClassLoader());
            mockedStatic.when(() -> SQLQueryReader.classLoader.getResourceAsStream(any())).thenReturn(mock(InputStream.class));

            when(new BufferedReader(any(Reader.class))).thenReturn(mockBufferedReader);
            when(mockBufferedReader.readLine()).thenThrow(new IOException("Test IOException"));

            // Act and Assert
            ExcelCreationException exception = assertThrows(ExcelCreationException.class, () -> sqlQueryReader.getSqlQuery());
            assertEquals("Error occurred while reading sql from file Test IOException", exception.getMessage());
        }
    }
}
