import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Service
public class ExcelService {

    private static final List<String> FIELD_NAMES = Arrays.asList(
            "firstName", "lastName", "sourceListName", "nationalities", "status",
            "complianceUnit", "domicile", "creationDate", "updatedDate", "profileID",
            "ownershipCountry", "ownershipDivision", "dob", "onboardingCategory", "totalRowCount", "notes"
    );

    public String generateExcel(List<Map<String, Object>> data) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Sheet1");

        try {
            // Create header row
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < FIELD_NAMES.size(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(FIELD_NAMES.get(i));
            }

            // Populate data rows
            for (int rowIndex = 0; rowIndex < data.size(); rowIndex++) {
                Row dataRow = sheet.createRow(rowIndex + 1);
                Map<String, Object> rowData = data.get(rowIndex);

                int cellIndex = 0;
                for (String fieldName : FIELD_NAMES) {
                    Cell cell = dataRow.createCell(cellIndex++);
                    Object value = rowData.get(fieldName);
                    if (value != null) {
                        cell.setCellValue(value.toString());
                    }
                }
            }

            // Convert workbook to byte array
            try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
                workbook.write(outputStream);
                return java.util.Base64.getEncoder().encodeToString(outputStream.toByteArray());
            }
        } finally {
            // Close workbook resources
            workbook.close();
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;

@RestController
public class ExcelController {

    @PostMapping("/generate-excel")
    public ResponseEntity<String> generateExcel(@RequestBody List<Map<String, Object>> data) {
        String excelData = ExcelUtil.generateExcel(data);

        if (excelData.startsWith("Error")) {
            return new ResponseEntity<>(excelData, HttpStatus.INTERNAL_SERVER_ERROR);
        } else {
            // Adjust headers as needed (e.g., content type)
            return ResponseEntity.ok()
                    .header("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                    .body(excelData);
        }
    }
}




////////////////////////////////////////////////////////////////  JAVA util 

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class ExcelUtil {

    public static String generateExcel(List<Map<String, Object>> data) {
        if (data.isEmpty()) {
            return "No data provided";
        }

        try (Workbook workbook = new XSSFWorkbook();
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            Sheet sheet = workbook.createSheet("Sheet1");

            // Extract headers from the first map in the data
            Map<String, Object> firstRow = data.get(0);
            String[] headers = firstRow.keySet().toArray(new String[0]);

            // Create header row
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
            }

            // Populate data rows
            for (int rowIndex = 0; rowIndex < data.size(); rowIndex++) {
                Row dataRow = sheet.createRow(rowIndex + 1);
                Map<String, Object> rowData = data.get(rowIndex);

                int cellIndex = 0;
                for (String header : headers) {
                    Cell cell = dataRow.createCell(cellIndex++);
                    Object value = rowData.get(header);
                    if (value != null) {
                        cell.setCellValue(value.toString());
                    }
                }
            }

            // Write workbook to byte array
            workbook.write(outputStream);
            return java.util.Base64.getEncoder().encodeToString(outputStream.toByteArray());

        } catch (IOException e) {
            e.printStackTrace(); // Log or handle the exception as needed
            return "Error generating Excel file";
        }
    }
}

/////////////////////////// Testing for above ///////////////
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

@RunWith(SpringRunner.class)
@SpringBootTest
public class WorkBenchControllerTest {

    @Autowired
    private WorkBenchController workBenchController;

    @Test
    public void testGenerateExcel_Success() {
        // Given
        List<Map<String, Object>> testData = Arrays.asList(
                Map.of("name", "John", "age", 25),
                Map.of("name", "Jane", "age", 30)
        );

        // When
        ResponseEntity<String> response = workBenchController.generateExcel(testData);

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getHeaders().containsKey("Content-Type"));
        assertEquals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", response.getHeaders().getContentType().toString());
        // Add more assertions if needed based on the actual behavior of your application
    }

    @Test
    public void testGenerateExcel_EmptyData() {
        // Given
        List<Map<String, Object>> emptyData = Arrays.asList();

        // When
        ResponseEntity<String> response = workBenchController.generateExcel(emptyData);

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody().startsWith("Error"));
        // Add more assertions if needed based on the actual behavior of your application
    }

    @Test
    public void testGenerateExcel_Error() {
        // Given
        List<Map<String, Object>> errorData = Arrays.asList(
                Map.of("name", "John", "age", 25),
                Map.of("name", "Jane", "age", 30)
        );

        // When
        ResponseEntity<String> response = workBenchController.generateExcel(errorData);

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody().startsWith("Error"));
        // Add more assertions if needed based on the actual behavior of your application
    }
}

