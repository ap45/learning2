import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Types;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

class WorkbenchDaoTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private RowMapperFactory rowMapperFactory;

    @InjectMocks
    private WorkbenchDao<Object> workbenchDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetWorkbenchData() {
        // ... (unchanged)

        // Act
        List<Object> result = workbenchDao.getWorkbenchData(gridId, query, fieldValues);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("MockedResult", result.get(0));

        // Verify interactions with mocks
        verify(rowMapperFactory).getRowMapper(gridId);
        verify(jdbcTemplate).query(eq(query), any(), any());
    }

    @Test
    void testCustomSqlParameterSource() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        // Arrange
        List<Object> fieldValues = Arrays.asList("value1", 42, 3.14f, true);

        // Act
        WorkbenchDao.CustomSqlParameterSource parameterSource = instantiateCustomSqlParameterSource(fieldValues);

        // Assert
        // (unchanged)

    }

    private WorkbenchDao.CustomSqlParameterSource instantiateCustomSqlParameterSource(List<Object> fieldValues) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        // Using reflection to instantiate the private CustomSqlParameterSource class
        Class<?> customSqlParameterSourceClass = WorkbenchDao.CustomSqlParameterSource.class;
        Constructor<?> constructor = customSqlParameterSourceClass.getDeclaredConstructor(List.class);
        constructor.setAccessible(true); // Allow access to private constructor
        return (WorkbenchDao.CustomSqlParameterSource) constructor.newInstance(fieldValues);
    }
}
