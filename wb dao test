import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class WorkbenchDaoTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private RowMapperFactory rowMapperFactory;

    @InjectMocks
    private WorkbenchDao<Object> workbenchDao; // Replace Object with the actual type you want to test

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetWorkbenchData() {
        // Mocking data
        String gridId = "PROFILE_SEARCH_GRID";
        String query = "SELECT * FROM test_table";
        List<Object> fieldValues = Arrays.asList("value1", "value2");

        // Mocking RowMapper
        RowMapper<Object> rowMapper = mock(RowMapper.class);
        when(rowMapperFactory.getRowMapper(gridId)).thenReturn(rowMapper);

        // Mocking NamedParameterJdbcTemplate
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = mock(NamedParameterJdbcTemplate.class);
        when(namedParameterJdbcTemplate.query(any(String.class), any(), any(RowMapper.class)))
                .thenReturn(Collections.singletonList(new Object())); // Replace Object with the actual type you want to test

        // Mocking CustomSqlParameterSource
        when(workbenchDao.getCustomSqlParameterSource(fieldValues))
                .thenReturn(new WorkbenchDao.CustomSqlParameterSource(fieldValues));

        // Setting up the JdbcTemplate in the WorkbenchDao
        workbenchDao.setJdbcTemplate(jdbcTemplate);

        // Executing the method to test
        List<Object> result = workbenchDao.getWorkbenchData(gridId, query, fieldValues);

        // Verifying the interactions
        verify(namedParameterJdbcTemplate).query(eq(query), any(), eq(rowMapper));
        assertEquals(1, result.size()); // Replace 1 with the expected size based on your mocked data
    }

    @Test
    public void testGetCustomSqlParameterSource() {
        // Mocking data
        List<Object> fieldValues = Arrays.asList("value1", "value2");

        // Executing the method to test
        WorkbenchDao.CustomSqlParameterSource customSqlParameterSource =
                workbenchDao.getCustomSqlParameterSource(fieldValues);

        // Verifying the interactions
        assertEquals(fieldValues, customSqlParameterSource.getValues());
    }
}
