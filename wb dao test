import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class WorkbenchDaoTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private RowMapperFactory rowMapperFactory;

    @InjectMocks
    private WorkbenchDao<Object> workbenchDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetWorkbenchData() {
        // Arrange
        String gridId = "PROFILE_SEARCH_GRID";
        String query = "SELECT * FROM some_table WHERE condition = :param0";
        List<Object> fieldValues = new ArrayList<>();

        when(rowMapperFactory.getRowMapper(anyString())).thenReturn(mock(RowMapper.class));
        when(jdbcTemplate.query(anyString(), any(), any(RowMapper.class))).thenReturn(new ArrayList<>());

        // Act
        List<Object> result = workbenchDao.getWorkbenchData(gridId, query, fieldValues);

        // Assert
        assertNotNull(result);
        verify(jdbcTemplate, times(1)).query(anyString(), any(), any(RowMapper.class));
    }

    @Test
    void testCustomSqlParameterSource() {
        // Arrange
        List<Object> values = new ArrayList<>();
        values.add("param0");

        WorkbenchDao.CustomSqlParameterSource customSqlParameterSource = new WorkbenchDao.CustomSqlParameterSource(values);

        // Act
        boolean hasValueResult = customSqlParameterSource.hasValue("param0");
        Object valueResult = customSqlParameterSource.getValue("param0");
        int sqlTypeResult = customSqlParameterSource.getSqlType("param0");

        // Assert
        assertTrue(hasValueResult);
        assertEquals("param0", valueResult);
        assertEquals(Types.NVARCHAR, sqlTypeResult);
    }
}
