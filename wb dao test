import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.SqlTypeValue;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class WorkbenchDaoTest {

    @Test
    void customSqlParameterSource_getSqlType_ReturnsCorrectSqlTypeForString() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        List<Object> values = Arrays.asList("value1");
        WorkbenchDao.CustomSqlParameterSource customSqlParameterSource = createCustomSqlParameterSource(values);

        int result = invokePrivateMethod(customSqlParameterSource, "getSqlType", "param0");

        assertEquals(java.sql.Types.NVARCHAR, result);
    }

    // Add similar tests for other scenarios

    private WorkbenchDao.CustomSqlParameterSource createCustomSqlParameterSource(List<Object> values) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Constructor<WorkbenchDao.CustomSqlParameterSource> constructor = WorkbenchDao.CustomSqlParameterSource.class.getDeclaredConstructor(List.class);
        constructor.setAccessible(true);
        return constructor.newInstance(values);
    }

    private int invokePrivateMethod(Object instance, String methodName, String paramName) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Method method = instance.getClass().getDeclaredMethod(methodName, String.class);
        method.setAccessible(true);
        return (int) method.invoke(instance, paramName);
    }
}
