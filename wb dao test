import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Types;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

class WorkbenchDaoTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private RowMapperFactory rowMapperFactory;

    @InjectMocks
    private WorkbenchDao<Object> workbenchDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCustomSqlParameterSource() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        List<Object> values = Arrays.asList("value1", 2, 3.0f, true);

        // Use reflection to access the private method of CustomSqlParameterSource
        Method method = WorkbenchDao.CustomSqlParameterSource.class.getDeclaredMethod("create", List.class);
        method.setAccessible(true);

        WorkbenchDao.CustomSqlParameterSource customSqlParameterSource = (WorkbenchDao.CustomSqlParameterSource) method.invoke(null, values);

        // Test hasValue method
        assertTrue(customSqlParameterSource.hasValue("param0"));
        assertFalse(customSqlParameterSource.hasValue("nonexistentParam"));

        // Test getValue method
        assertEquals("value1", customSqlParameterSource.getValue("param0"));
        assertThrows(IllegalArgumentException.class, () -> customSqlParameterSource.getValue("nonexistentParam"));

        // Test getSqlType method
        assertEquals(Types.NVARCHAR, customSqlParameterSource.getSqlType("param0"));
        assertEquals(Types.DOUBLE, customSqlParameterSource.getSqlType("param1"));
        assertEquals(Types.REAL, customSqlParameterSource.getSqlType("param2"));
        assertEquals(Types.BIT, customSqlParameterSource.getSqlType("param3"));

        // Add more assertions for other types as needed

        // Test getTypeName method
        assertNull(customSqlParameterSource.getTypeName("param0"));
    }

    // Other test methods remain unchanged...
}
