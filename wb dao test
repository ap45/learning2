import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.sql.Types;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

class WorkbenchDaoTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private RowMapperFactory rowMapperFactory;

    @InjectMocks
    private WorkbenchDao<Object> workbenchDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCustomSqlParameterSource_hasValue() {
        List<Object> values = Arrays.asList("value1", 42);
        WorkbenchDao<Object>.CustomSqlParameterSource paramSource = workbenchDao.new CustomSqlParameterSource(values);

        assertTrue(paramSource.hasValue("param0"));
        assertTrue(paramSource.hasValue("param1"));
        assertFalse(paramSource.hasValue("nonexistent"));
    }

    @Test
    void testCustomSqlParameterSource_getValue() {
        List<Object> values = Arrays.asList("value1", 42);
        WorkbenchDao<Object>.CustomSqlParameterSource paramSource = workbenchDao.new CustomSqlParameterSource(values);

        assertEquals("value1", paramSource.getValue("param0"));
        assertEquals(42, paramSource.getValue("param1"));
    }

    @Test
    void testCustomSqlParameterSource_getSqlType() {
        List<Object> values = Arrays.asList("string", 123, 45.6f, true, (byte) 1, (short) 2, 3L, BigDecimal.ONE,
                java.sql.Date.valueOf("2022-01-30"), java.sql.Timestamp.valueOf("2022-01-30 12:34:56"),
                java.sql.Time.valueOf("12:34:56"), new byte[]{1, 2, 3}, mock(java.sql.Blob.class),
                mock(java.sql.Clob.class));

        WorkbenchDao<Object>.CustomSqlParameterSource paramSource = workbenchDao.new CustomSqlParameterSource(values);

        assertEquals(Types.NVARCHAR, paramSource.getSqlType("param0"));
        assertEquals(Types.DOUBLE, paramSource.getSqlType("param1"));
        assertEquals(Types.REAL, paramSource.getSqlType("param2"));
        assertEquals(Types.BIT, paramSource.getSqlType("param3"));
        assertEquals(Types.TINYINT, paramSource.getSqlType("param4"));
        assertEquals(Types.SMALLINT, paramSource.getSqlType("param5"));
        assertEquals(Types.BIGINT, paramSource.getSqlType("param6"));
        assertEquals(Types.DECIMAL, paramSource.getSqlType("param7"));
        assertEquals(Types.DATE, paramSource.getSqlType("param8"));
        assertEquals(Types.TIMESTAMP, paramSource.getSqlType("param9"));
        assertEquals(Types.TIME, paramSource.getSqlType("param10"));
        assertEquals(Types.BINARY, paramSource.getSqlType("param11"));
        assertEquals(Types.BLOB, paramSource.getSqlType("param12"));
        assertEquals(Types.CLOB, paramSource.getSqlType("param13"));
    }

    // Add more t
