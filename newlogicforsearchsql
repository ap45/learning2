import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

@Service
public class ProfileService {

    @Autowired
    private EntityManager entityManager;

    public List<Object[]> searchAllTables(String columnName, String searchText) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Object[]> query = cb.createQuery(Object[].class);
        List<Root<?>> roots = new ArrayList<>();
        roots.add(query.from(Profile.class));
        roots.add(query.from(Interest.class));
        roots.add(query.from(Post.class));
        roots.add(query.from(ContactInfo.class));

        List<Path<?>> columnsToSelect = roots.stream()
            .map(root -> root.get(columnName))
            .collect(Collectors.toList());

        query.multiselect(columnsToSelect);

        List<Predicate> predicates = roots.stream()
            .map(root -> createPredicate(root, columnName, searchText, cb))
            .collect(Collectors.toList());

        query.where(cb.or(predicates.toArray(new Predicate[0])));

        TypedQuery<Object[]> typedQuery = entityManager.createQuery(query);

        return typedQuery.getResultList();
    }

    private Predicate createPredicate(Root<?> root, String columnName, String searchText, CriteriaBuilder cb) {
        Path<String> columnPath = root.get(columnName);
        return cb.like(columnPath, "%" + searchText + "%");
    }
}



///// Controller //////


@RestController
@RequestMapping("/api/profiles")
public class ProfileController {

    @Autowired
    private ProfileService profileService;

    @GetMapping("/search")
    public ResponseEntity<List<Object>> searchAllTables(
            @RequestParam String columnName,
            @RequestParam String searchText
    ) {
        List<Object> searchResults = profileService.searchAllTables(columnName, searchText);
        return ResponseEntity.ok(searchResults);
    }
}
