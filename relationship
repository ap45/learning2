// Action Types
export const HRN_ID = 'HRN_ID';
export const HRN_ID_RESET = 'HRN_ID_RESET';
export const HRN_ID_SUCCESS = 'HRN_ID_SUCCESS';
export const HRN_ID_FAILURE = 'HRN_ID_FAILURE';

// Action Creators
export function hrnIdResetAction() {
  return { type: HRN_ID_RESET };
}

export function hrnIdInitialAction() {
  return { type: HRN_ID };
}

export function hrnIdSuccessAction(payload) {
  return {
    type: HRN_ID_SUCCESS,
    payload,
  };
}

export function hrnIdFailureAction(payload) {
  return {
    type: HRN_ID_FAILURE,
    payload,
  };
}

// Thunk Action for API Call
export function hrnIdAction(payload) {
  return async (dispatch) => {
    try {
      dispatch(hrnIdInitialAction());
      const response = await apiCall({ method: 'get', url: `profiles/${payload}` });
      dispatch(hrnIdSuccessAction(response.data));
    } catch (error) {
      dispatch(hrnIdFailureAction(error.message));
    }
  };
}





// Initial State
const initialHrnIdState = {
  loading: false,
  error: false,
  flag: false,
  data: [],
};

// Reducer
export function hrnIdReducer(state = initialHrnIdState, action) {
  switch (action.type) {
    case HRN_ID:
      return {
        ...state,
        loading: true,
        error: false,
        flag: false,
        data: [],
      };
    case HRN_ID_RESET:
      return {
        ...state,
        loading: false,
        error: false,
        flag: false,
        data: [],
      };
    case HRN_ID_SUCCESS:
      return {
        ...state,
        loading: false,
        error: false,
        flag: true,
        data: action.payload,
      };
    case HRN_ID_FAILURE:
      return {
        ...state,
        loading: false,
        error: true,
        flag: false,
        data: [],
      };
    default:
      return state;
  }
}


// Initial State
const initialHrnState = {
  hrnDetails: [],
};

// Action Types
const ADD_HRN = 'ADD_HRN';
const UPDATE_HRN = 'UPDATE_HRN';
const RESET_HRN = 'RESET_HRN';
const DELETE_HRN = 'DELETE_HRN';

// Action Creators
export const addHrn = (payload) => ({
  type: ADD_HRN,
  payload,
});

export const updateHrn = (payload) => ({
  type: UPDATE_HRN,
  payload,
});

export const resetHrn = () => ({
  type: RESET_HRN,
});

export const deleteHrn = (payload) => ({
  type: DELETE_HRN,
  payload,
});

// Reducer
const hrnDetailsReducer = (state = initialHrnState, action) => {
  switch (action.type) {
    case ADD_HRN:
      return {
        ...state,
        hrnDetails: [...state.hrnDetails, action.payload],
      };
    case UPDATE_HRN:
      return {
        ...state,
        hrnDetails: state.hrnDetails.map((hrn) =>
          hrn.id === action.payload.id ? action.payload : hrn
        ),
      };
    case RESET_HRN:
      return {
        ...state,
        hrnDetails: [],
      };
    case DELETE_HRN:
      return {
        ...state,
        hrnDetails: state.hrnDetails.filter((hrn) => hrn.id !== action.payload),
      };
    default:
      return state;
  }
};

export default hrnDetailsReducer;

// Utility Function
export function generateRandomString() {
  return Math.random().toString(36).substr(2, 9);
}



import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Grid, TextField, Button, Select, MenuItem, FormControl, InputLabel, Typography } from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import { hrnIdAction } from './actions';
import { addHrn, updateHrn, resetHrn, deleteHrn, generateRandomString } from './hrnDetailsReducer';

const RelationshipsComponent = () => {
  const [relationship, setRelationship] = useState({
    relationType: '',
    relationStatus: '',
    profileId: ''
  });
  const dispatch = useDispatch();
  const { loading, error, flag, data: apiData } = useSelector(state => state.hrnId);
  const hrnDetails = useSelector(state => state.hrnDetails.hrnDetails);

  const handleAddRelationship = () => {
    if (relationship.profileId) {
      dispatch(hrnIdAction(relationship.profileId));
    }
  };

  const handleAddHrnDetail = () => {
    const newHrn = {
      id: generateRandomString(),
      relationType: relationship.relationType,
      relationStatus: relationship.relationStatus,
      profileId: relationship.profileId,
      ...apiData,
    };
    dispatch(addHrn(newHrn));
  };

  const handleDeleteHrnDetail = (id) => {
    dispatch(deleteHrn(id));
  };

  // Call handleAddHrnDetail after a successful API call
  React.useEffect(() => {
    if (flag && apiData) {
      handleAddHrnDetail();
    }
  }, [flag, apiData]);

  return (
    <div style={{ padding: 20 }}>
      <Typography variant="h5">Create a new profile for an individual</Typography>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <FormControl fullWidth margin="normal">
            <InputLabel>Relation Type</InputLabel>
            <Select
              value={relationship.relationType}
              onChange={(e) => setRelationship({ ...relationship, relationType: e.target.value })}
            >
              <MenuItem value="Wife">Wife</MenuItem>
              <MenuItem value="Business associate">Business associate</MenuItem>
              {/* Add other options as needed */}
            </Select>
          </FormControl>
          <FormControl fullWidth margin="normal">
            <InputLabel>Relationship Status</InputLabel>
            <Select
              value={relationship.relationStatus}
              onChange={(e) => setRelationship({ ...relationship, relationStatus: e.target.value })}
            >
              <MenuItem value="Current">Current</MenuItem>
              <MenuItem value="Past">Past</MenuItem>
              {/* Add other options as needed */}
            </Select>
          </FormControl>
          <TextField
            fullWidth
            margin="normal"
            label="Profile ID"
            value={relationship.profileId}
            onChange={(e) => setRelationship({ ...relationship, profileId: e.target.value })}
            error={error}
            helperText={error ? "We couldn't find a match. Please check ID." : ""}
          />
          <Button variant="contained" color="primary" onClick={handleAddRelationship} disabled={loading}>
            Validate and Add
          </Button>
        </Grid>
        {hrnDetails.length > 0 && (
          <Grid item xs={12} md={6}>
            <Typography variant="h6">Profile data successfully added:</Typography>
            <div style={{ height: 400, width: '100%' }}>
              <DataGrid
                rows={hrnDetails}
                columns={[
                  { field: 'relationType', headerName: 'Relation Type', width: 150 },
                  { field: 'profileId', headerName: 'Profile ID', width: 150 },
                  { field: 'lastName', headerName: 'Last Name', width: 150 },
                  { field: 'firstName', headerName: 'First Name', width: 150 },
                  { field: 'relationStatus', headerName: 'Relationship Status', width: 150 },
                  { field: 'obStatus', headerName: 'Onboarding Status', width: 150 },
                  {
                    field: 'actions',
                    headerName: 'Actions',
                    width: 150,
                    renderCell: (params) => (
                      <Button
                        variant="contained"
                        color="secondary"
                        onClick={() => handleDeleteHrnDetail(params.row.id)}
                      >
                        Delete
                      </Button>
                    ),
                  },
                ]}
                pageSize={5}
                rowsPerPageOptions={[5]}
              />
            </div>
          </Grid>
        )}
      </Grid>
    </div>
  );
};

export default RelationshipsComponent;

.container {
  padding: 20px;
}

.grid-container {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
}

.grid-item {
  flex: 1;
}

.data-grid-container {
  height: 400px;
  width: 100%;
}
