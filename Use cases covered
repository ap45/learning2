import java.util.HashMap;
import java.util.List;
import java.util.Map;

enum QueryOperator {
    EQUALS("="),
    NOT_EQUALS("!="),
    CONTAINS("LIKE"),
    NOT_CONTAINS("NOT LIKE"),
    BETWEEN("BETWEEN"),
    NOT_BETWEEN("NOT BETWEEN");

    private final String sqlOperator;

    QueryOperator(String sqlOperator) {
        this.sqlOperator = sqlOperator;
    }

    public String getSqlOperator() {
        return sqlOperator;
    }
}

class SearchCriteria {
    private String queryKey;
    private QueryOperator queryOperator;
    private String queryValue;

    public SearchCriteria(String queryKey, QueryOperator queryOperator, String queryValue) {
        this.queryKey = queryKey;
        this.queryOperator = queryOperator;
        this.queryValue = queryValue;
    }

    public String getQueryKey() {
        return queryKey;
    }

    public QueryOperator getQueryOperator() {
        return queryOperator;
    }

    public String getQueryValue() {
        return queryValue;
    }
}

class ColumnSelector {
    private String uiKey;
    private String dbKey;
    private String dbSelectKey;
    private boolean isExportable;
    private String dbDataType; // SQL data type (e.g., VARCHAR, INT, DATE)

    public ColumnSelector(String uiKey, String dbKey, String dbSelectKey, boolean isExportable, String dbDataType) {
        this.uiKey = uiKey;
        this.dbKey = dbKey;
        this.dbSelectKey = dbSelectKey;
        this.isExportable = isExportable;
        this.dbDataType = dbDataType;
    }

    public String getUiKey() {
        return uiKey;
    }

    public String getDbKey() {
        return dbKey;
    }

    public String getDbSelectKey() {
        return dbSelectKey;
    }

    public boolean isExportable() {
        return isExportable;
    }

    public String getDbDataType() {
        return dbDataType;
    }
}

class ColumnSelectorMapper {
    private Map<String, ColumnSelector> mapping;

    public ColumnSelectorMapper() {
        // Initialize the mapping with your UI key to ColumnSelector mappings
        mapping = new HashMap<>();
        mapping.put("uiKey1", new ColumnSelector("uiKey1", "dbKey1", "dbSelectKey1", true, "VARCHAR"));
        mapping.put("uiKey2", new ColumnSelector("uiKey2", "dbKey2", "dbSelectKey2", false, "INT"));
        mapping.put("uiKey3", new ColumnSelector("uiKey3", "dbKey3", "dbSelectKey3", true, "DATE"));
        // Add more mappings as needed
    }

    public ColumnSelector getColumnSelector(String uiKey) {
        return mapping.get(uiKey);
    }
}

public class QueryBuilder {

    public static String buildWhereClause(List<SearchCriteria> criteriaList, ColumnSelectorMapper columnSelectorMapper) {
        StringBuilder whereClause = new StringBuilder("WHERE ");
        boolean firstCriteria = true;

        for (SearchCriteria criteria : criteriaList) {
            String queryKey = criteria.getQueryKey();
            QueryOperator queryOperator = criteria.getQueryOperator();
            String queryValue = criteria.getQueryValue();

            ColumnSelector columnSelector = columnSelectorMapper.getColumnSelector(queryKey);
            if (columnSelector != null) {
                String dbKey = columnSelector.getDbKey();
                String dbDataType = columnSelector.getDbDataType();
                String sqlOperator = queryOperator.getSqlOperator();

                if (!firstCriteria) {
                    whereClause.append(" AND ");
                }

                whereClause.append(dbKey).append(" ");

                // Handling data type-specific operations
                if (dbDataType.equals("VARCHAR")) {
                    if (queryOperator == QueryOperator.CONTAINS || queryOperator == QueryOperator.NOT_CONTAINS) {
                        whereClause.append(sqlOperator).append(" '%").append(queryValue).append("%'");
                    } else {
                        whereClause.append(sqlOperator).append(" '").append(queryValue).append("'");
                    }
                } else if (dbDataType.equals("INT")) {
                    if (queryOperator == QueryOperator.BETWEEN || queryOperator == QueryOperator.NOT_BETWEEN) {
                        String[] values = queryValue.split(",");
                        if (values.length == 2) {
                            whereClause.append(sqlOperator).append(" ").append(values[0]).append(" AND ").append(values[1]);
                        }
                    } else {
                        whereClause.append(sqlOperator).append(" ").append(queryValue);
                    }
                } else if (dbDataType.equals("DATE")) {
                    if (queryOperator == QueryOperator.BETWEEN || queryOperator == QueryOperator.NOT_BETWEEN) {
                        String[] values = queryValue.split(",");
                        if (values.length == 2) {
                            whereClause.append(sqlOperator).append(" '").append(values[0]).append("' AND '").append(values[1]).append("'");
                        }
                    } else {
                        whereClause.append(sqlOperator).append(" '").append(queryValue).append("'");
                    }
                }

                firstCriteria = false;
            }
        }

        return whereClause.toString();
    }

    public static void main(String[] args) {
        ColumnSelectorMapper columnSelectorMapper = new ColumnSelectorMapper();

        List<SearchCriteria> searchCriteriaList = List.of(
            new SearchCriteria("uiKey1", QueryOperator.EQUALS, "value1"),
            new SearchCriteria("uiKey2", QueryOperator.CONTAINS, "value2"),
            new SearchCriteria("uiKey3", QueryOperator.BETWEEN, "2023-01-01,2023-12-31")
        );

        String whereClause = buildWhereClause(searchCriteriaList, columnSelectorMapper);
        System.out.println("Generated WHERE clause: " + whereClause);
    }
}
