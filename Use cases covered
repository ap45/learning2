import java.util.List;
import java.util.stream.Collectors;
import java.util.function.BiFunction;

public class WhereClauseBuilder {
    private WorkbenchRequest workbenchRequest;
    private ColumnSelector columnSelector;

    public WhereClauseBuilder(WorkbenchRequest workbenchRequest, ColumnSelector columnSelector) {
        this.workbenchRequest = workbenchRequest;
        this.columnSelector = columnSelector;
    }

    public StringBuilder getWhereClause() {
        List<SearchCriteria> searchCriteriaList = workbenchRequest.getSearchCriterialist();
        List<String> fieldNames = searchCriteriaList.stream()
                .map(cri -> cri.getQueryKey())
                .collect(Collectors.toList());

        List<String> dbNames = fieldNames.stream()
                .map(name -> columnSelector.getColumnMetaData(name).getDBKey())
                .collect(Collectors.toList());

        List<String> comparisonOperators = searchCriteriaList.stream()
                .map(cri -> mapOperator(cri.getQueryOperator()))
                .collect(Collectors.toList());

        StringBuilder sql = new StringBuilder(" ");

        boolean firstCondition = true;

        for (int i = 0; i < dbNames.size(); i++) {
            if (!firstCondition) {
                sql.append(" AND ");
            } else {
                firstCondition = false;
            }

            String operator = comparisonOperators.get(i);
            BiFunction<String, Object, String> operatorFunction = null;

            switch (operator) {
                case "=":
                    operatorFunction = OperatorStrategies::handleEquals;
                    break;
                case "!=":
                    operatorFunction = OperatorStrategies::handleNotEquals;
                    break;
                case "contains":
                    operatorFunction = OperatorStrategies::handleContains;
                    break;
                case "does not contain":
                    operatorFunction = OperatorStrategies::handleDoesNotContain;
                    break;
                case "between":
                    operatorFunction = OperatorStrategies::handleBetween;
                    break;
                case "not between":
                    operatorFunction = OperatorStrategies::handleNotBetween;
                    break;
                case "in":
                    operatorFunction = OperatorStrategies::handleIn;
                    break;
                case "not in":
                    operatorFunction = OperatorStrategies::handleNotIn;
                    break;
                case "empty":
                    operatorFunction = OperatorStrategies::handleEmpty;
                    break;
                case "is not empty":
                    operatorFunction = OperatorStrategies::handleIsNotEmpty;
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported UI operation: " + operator);
            }

            if (operatorFunction != null) {
                sql.append(operatorFunction.apply(dbNames.get(i), workbenchRequest.getSearchCriterialist().get(i).getQueryValue())).append("param").append(i);
            } else {
                throw new IllegalArgumentException("Unsupported UI operation: " + operator);
            }
        }

        return sql;
    }
}


/////////////////////

import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.function.BiFunction;

public class OperatorStrategies {
    public static String handleEquals(String dbName, Object queryValue) {
        return dbName + " = " + formatQueryValue(queryValue);
    }

    public static String handleNotEquals(String dbName, Object queryValue) {
        return dbName + " != " + formatQueryValue(queryValue);
    }

    public static String handleContains(String dbName, Object queryValue) {
        return dbName + " LIKE '%" + queryValue + "%'";
    }

    public static String handleDoesNotContain(String dbName, Object queryValue) {
        return dbName + " NOT LIKE '%" + queryValue + "%'";
    }

    public static String handleBetween(String dbName, Object queryValue) {
        String[] values = queryValue.toString().split(",");
        if (values.length == 2) {
            return dbName + " BETWEEN " + formatQueryValue(values[0]) + " AND " + formatQueryValue(values[1]);
        } else {
            throw new IllegalArgumentException("Invalid value for 'between' operator");
        }
    }

    public static String handleNotBetween(String dbName, Object queryValue) {
        String[] values = queryValue.toString().split(",");
        if (values.length == 2) {
            return dbName + " NOT BETWEEN " + formatQueryValue(values[0]) + " AND " + formatQueryValue(values[1]);
        } else {
            throw new IllegalArgumentException("Invalid value for 'not between' operator");
        }
    }

    public static String handleIn(String dbName, Object queryValue) {
        String formattedValues = formatQueryValues(queryValue);
        return dbName + " IN (" + formattedValues + ")";
    }

    public static String handleNotIn(String dbName, Object queryValue) {
        String formattedValues = formatQueryValues(queryValue);
        return dbName + " NOT IN (" + formattedValues + ")";
    }

    public static String handleEmpty(String dbName, Object queryValue) {
        return dbName + " IS NULL";
    }

    public static String handleIsNotEmpty(String dbName, Object queryValue) {
        return dbName + " IS NOT NULL";
    }

    private static String formatQueryValue(Object queryValue) {
        if (queryValue instanceof String || queryValue instanceof java.sql.Date) {
            return "'" + queryValue + "'";
        } else {
            return String.valueOf(queryValue);
        }
    }

    private static String formatQueryValues(Object queryValue) {
        if (queryValue instanceof Object[]) {
            Object[] values = (Object[]) queryValue;
            return Arrays.stream(values)
                    .map(OperatorStrategies::formatQueryValue)
                    .collect(Collectors.joining(", "));
        } else {
            return formatQueryValue(queryValue);
        }
    }
}
